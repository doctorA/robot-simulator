//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g 2012-02-08 19:24:19

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class RobotLanguageParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ATTR", "COMM", "DATE", "DIN", "DOUT", "FRAME", "GROUP", "INDEKS", "INST", "INT", "JOB", "MINUS", "MOVC", "MOVJ", "MOVL", "MOVS", "NAME", "NEWLINE", "NIZ", "NPOS", "ONOFF", "POS", "POSTYPE", "RCONF", "REAL", "RECTAN", "TIME", "TIMER", "TOOL", "USER", "WS", "','", "'/'", "'0'", "'1'", "'='", "'END'", "'NOP'", "'PULSE'", "'USER'", "'V'", "'VJ'"
	};
	public const int EOF=-1;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int ATTR=4;
	public const int COMM=5;
	public const int DATE=6;
	public const int DIN=7;
	public const int DOUT=8;
	public const int FRAME=9;
	public const int GROUP=10;
	public const int INDEKS=11;
	public const int INST=12;
	public const int INT=13;
	public const int JOB=14;
	public const int MINUS=15;
	public const int MOVC=16;
	public const int MOVJ=17;
	public const int MOVL=18;
	public const int MOVS=19;
	public const int NAME=20;
	public const int NEWLINE=21;
	public const int NIZ=22;
	public const int NPOS=23;
	public const int ONOFF=24;
	public const int POS=25;
	public const int POSTYPE=26;
	public const int RCONF=27;
	public const int REAL=28;
	public const int RECTAN=29;
	public const int TIME=30;
	public const int TIMER=31;
	public const int TOOL=32;
	public const int USER=33;
	public const int WS=34;

	public RobotLanguageParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public RobotLanguageParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return RobotLanguageParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_start();
	partial void LeaveRule_start();

	// $ANTLR start "start"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:10:8: public start : prog ;
	[GrammarRule("start")]
	public AstParserRuleReturnScope<CommonTree, IToken> start()
	{
		EnterRule_start();
		EnterRule("start", 1);
		TraceIn("start", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prog1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "start");
		DebugLocation(10, 7);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:11:2: ( prog )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:11:4: prog
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(11, 4);
			PushFollow(Follow._prog_in_start37);
			prog1=prog();
			PopFollow();

			adaptor.AddChild(root_0, prog1.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("start", 1);
			LeaveRule("start", 1);
			LeaveRule_start();
		}
		DebugLocation(11, 7);
		} finally { DebugExitRule(GrammarFileName, "start"); }
		return retval;

	}
	// $ANTLR end "start"

	partial void EnterRule_prog();
	partial void LeaveRule_prog();

	// $ANTLR start "prog"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:13:1: prog : job name pos npos user tool postype rectan rconf ( cindeks )+ inst date comm attr frame group main -> job name pos npos user tool postype rectan rconf ( cindeks )+ inst date comm attr frame group main ;
	[GrammarRule("prog")]
	private AstParserRuleReturnScope<CommonTree, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 2);
		TraceIn("prog", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> job2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> name3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> pos4 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> npos5 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> user6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tool7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postype8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> rectan9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> rconf10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cindeks11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inst12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> date13 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> comm14 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attr15 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> frame16 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> group17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> main18 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_comm=new RewriteRuleSubtreeStream(adaptor,"rule comm");
		RewriteRuleSubtreeStream stream_rectan=new RewriteRuleSubtreeStream(adaptor,"rule rectan");
		RewriteRuleSubtreeStream stream_tool=new RewriteRuleSubtreeStream(adaptor,"rule tool");
		RewriteRuleSubtreeStream stream_job=new RewriteRuleSubtreeStream(adaptor,"rule job");
		RewriteRuleSubtreeStream stream_attr=new RewriteRuleSubtreeStream(adaptor,"rule attr");
		RewriteRuleSubtreeStream stream_inst=new RewriteRuleSubtreeStream(adaptor,"rule inst");
		RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date");
		RewriteRuleSubtreeStream stream_main=new RewriteRuleSubtreeStream(adaptor,"rule main");
		RewriteRuleSubtreeStream stream_pos=new RewriteRuleSubtreeStream(adaptor,"rule pos");
		RewriteRuleSubtreeStream stream_postype=new RewriteRuleSubtreeStream(adaptor,"rule postype");
		RewriteRuleSubtreeStream stream_frame=new RewriteRuleSubtreeStream(adaptor,"rule frame");
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
		RewriteRuleSubtreeStream stream_rconf=new RewriteRuleSubtreeStream(adaptor,"rule rconf");
		RewriteRuleSubtreeStream stream_group=new RewriteRuleSubtreeStream(adaptor,"rule group");
		RewriteRuleSubtreeStream stream_user=new RewriteRuleSubtreeStream(adaptor,"rule user");
		RewriteRuleSubtreeStream stream_cindeks=new RewriteRuleSubtreeStream(adaptor,"rule cindeks");
		RewriteRuleSubtreeStream stream_npos=new RewriteRuleSubtreeStream(adaptor,"rule npos");
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(13, 199);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:13:6: ( job name pos npos user tool postype rectan rconf ( cindeks )+ inst date comm attr frame group main -> job name pos npos user tool postype rectan rconf ( cindeks )+ inst date comm attr frame group main )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:13:8: job name pos npos user tool postype rectan rconf ( cindeks )+ inst date comm attr frame group main
			{
			DebugLocation(13, 8);
			PushFollow(Follow._job_in_prog45);
			job2=job();
			PopFollow();

			stream_job.Add(job2.Tree);
			DebugLocation(13, 12);
			PushFollow(Follow._name_in_prog47);
			name3=name();
			PopFollow();

			stream_name.Add(name3.Tree);
			DebugLocation(13, 17);
			PushFollow(Follow._pos_in_prog49);
			pos4=pos();
			PopFollow();

			stream_pos.Add(pos4.Tree);
			DebugLocation(13, 21);
			PushFollow(Follow._npos_in_prog51);
			npos5=npos();
			PopFollow();

			stream_npos.Add(npos5.Tree);
			DebugLocation(13, 26);
			PushFollow(Follow._user_in_prog53);
			user6=user();
			PopFollow();

			stream_user.Add(user6.Tree);
			DebugLocation(13, 31);
			PushFollow(Follow._tool_in_prog55);
			tool7=tool();
			PopFollow();

			stream_tool.Add(tool7.Tree);
			DebugLocation(13, 36);
			PushFollow(Follow._postype_in_prog57);
			postype8=postype();
			PopFollow();

			stream_postype.Add(postype8.Tree);
			DebugLocation(13, 44);
			PushFollow(Follow._rectan_in_prog59);
			rectan9=rectan();
			PopFollow();

			stream_rectan.Add(rectan9.Tree);
			DebugLocation(13, 51);
			PushFollow(Follow._rconf_in_prog61);
			rconf10=rconf();
			PopFollow();

			stream_rconf.Add(rconf10.Tree);
			DebugLocation(13, 57);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:13:57: ( cindeks )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==INDEKS))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:13:57: cindeks
					{
					DebugLocation(13, 57);
					PushFollow(Follow._cindeks_in_prog63);
					cindeks11=cindeks();
					PopFollow();

					stream_cindeks.Add(cindeks11.Tree);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(13, 66);
			PushFollow(Follow._inst_in_prog66);
			inst12=inst();
			PopFollow();

			stream_inst.Add(inst12.Tree);
			DebugLocation(13, 71);
			PushFollow(Follow._date_in_prog68);
			date13=date();
			PopFollow();

			stream_date.Add(date13.Tree);
			DebugLocation(13, 76);
			PushFollow(Follow._comm_in_prog70);
			comm14=comm();
			PopFollow();

			stream_comm.Add(comm14.Tree);
			DebugLocation(13, 81);
			PushFollow(Follow._attr_in_prog72);
			attr15=attr();
			PopFollow();

			stream_attr.Add(attr15.Tree);
			DebugLocation(13, 86);
			PushFollow(Follow._frame_in_prog74);
			frame16=frame();
			PopFollow();

			stream_frame.Add(frame16.Tree);
			DebugLocation(13, 92);
			PushFollow(Follow._group_in_prog76);
			group17=group();
			PopFollow();

			stream_group.Add(group17.Tree);
			DebugLocation(13, 98);
			PushFollow(Follow._main_in_prog78);
			main18=main();
			PopFollow();

			stream_main.Add(main18.Tree);


			{
			// AST REWRITE
			// elements: name, main, tool, comm, rconf, postype, cindeks, date, user, group, inst, frame, attr, job, rectan, pos, npos
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 13:103: -> job name pos npos user tool postype rectan rconf ( cindeks )+ inst date comm attr frame group main
			{
				DebugLocation(13, 106);
				adaptor.AddChild(root_0, stream_job.NextTree());
				DebugLocation(13, 110);
				adaptor.AddChild(root_0, stream_name.NextTree());
				DebugLocation(13, 115);
				adaptor.AddChild(root_0, stream_pos.NextTree());
				DebugLocation(13, 119);
				adaptor.AddChild(root_0, stream_npos.NextTree());
				DebugLocation(13, 124);
				adaptor.AddChild(root_0, stream_user.NextTree());
				DebugLocation(13, 129);
				adaptor.AddChild(root_0, stream_tool.NextTree());
				DebugLocation(13, 134);
				adaptor.AddChild(root_0, stream_postype.NextTree());
				DebugLocation(13, 142);
				adaptor.AddChild(root_0, stream_rectan.NextTree());
				DebugLocation(13, 149);
				adaptor.AddChild(root_0, stream_rconf.NextTree());
				DebugLocation(13, 155);
				if (!(stream_cindeks.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_cindeks.HasNext )
				{
					DebugLocation(13, 155);
					adaptor.AddChild(root_0, stream_cindeks.NextTree());

				}
				stream_cindeks.Reset();
				DebugLocation(13, 164);
				adaptor.AddChild(root_0, stream_inst.NextTree());
				DebugLocation(13, 169);
				adaptor.AddChild(root_0, stream_date.NextTree());
				DebugLocation(13, 174);
				adaptor.AddChild(root_0, stream_comm.NextTree());
				DebugLocation(13, 179);
				adaptor.AddChild(root_0, stream_attr.NextTree());
				DebugLocation(13, 184);
				adaptor.AddChild(root_0, stream_frame.NextTree());
				DebugLocation(13, 190);
				adaptor.AddChild(root_0, stream_group.NextTree());
				DebugLocation(13, 196);
				adaptor.AddChild(root_0, stream_main.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 2);
			LeaveRule("prog", 2);
			LeaveRule_prog();
		}
		DebugLocation(13, 199);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_job();
	partial void LeaveRule_job();

	// $ANTLR start "job"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:15:1: job : JOB ;
	[GrammarRule("job")]
	private AstParserRuleReturnScope<CommonTree, IToken> job()
	{
		EnterRule_job();
		EnterRule("job", 3);
		TraceIn("job", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken JOB19 = default(IToken);

		CommonTree JOB19_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "job");
		DebugLocation(15, 10);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:15:6: ( JOB )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:15:8: JOB
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(15, 8);
			JOB19=(IToken)Match(input,JOB,Follow._JOB_in_job124); 
			JOB19_tree = (CommonTree)adaptor.Create(JOB19);
			adaptor.AddChild(root_0, JOB19_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("job", 3);
			LeaveRule("job", 3);
			LeaveRule_job();
		}
		DebugLocation(15, 10);
		} finally { DebugExitRule(GrammarFileName, "job"); }
		return retval;

	}
	// $ANTLR end "job"

	partial void EnterRule_name();
	partial void LeaveRule_name();

	// $ANTLR start "name"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:16:1: name : NAME NIZ ;
	[GrammarRule("name")]
	private AstParserRuleReturnScope<CommonTree, IToken> name()
	{
		EnterRule_name();
		EnterRule("name", 4);
		TraceIn("name", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NAME20 = default(IToken);
		IToken NIZ21 = default(IToken);

		CommonTree NAME20_tree = default(CommonTree);
		CommonTree NIZ21_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(16, 15);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:16:6: ( NAME NIZ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:16:8: NAME NIZ
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(16, 8);
			NAME20=(IToken)Match(input,NAME,Follow._NAME_in_name131); 
			NAME20_tree = (CommonTree)adaptor.Create(NAME20);
			adaptor.AddChild(root_0, NAME20_tree);
			DebugLocation(16, 13);
			NIZ21=(IToken)Match(input,NIZ,Follow._NIZ_in_name133); 
			NIZ21_tree = (CommonTree)adaptor.Create(NIZ21);
			adaptor.AddChild(root_0, NIZ21_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("name", 4);
			LeaveRule("name", 4);
			LeaveRule_name();
		}
		DebugLocation(16, 15);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return retval;

	}
	// $ANTLR end "name"

	partial void EnterRule_pos();
	partial void LeaveRule_pos();

	// $ANTLR start "pos"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:17:1: pos : POS ;
	[GrammarRule("pos")]
	private AstParserRuleReturnScope<CommonTree, IToken> pos()
	{
		EnterRule_pos();
		EnterRule("pos", 5);
		TraceIn("pos", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken POS22 = default(IToken);

		CommonTree POS22_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "pos");
		DebugLocation(17, 9);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:17:5: ( POS )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:17:7: POS
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(17, 7);
			POS22=(IToken)Match(input,POS,Follow._POS_in_pos140); 
			POS22_tree = (CommonTree)adaptor.Create(POS22);
			adaptor.AddChild(root_0, POS22_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pos", 5);
			LeaveRule("pos", 5);
			LeaveRule_pos();
		}
		DebugLocation(17, 9);
		} finally { DebugExitRule(GrammarFileName, "pos"); }
		return retval;

	}
	// $ANTLR end "pos"

	partial void EnterRule_npos();
	partial void LeaveRule_npos();

	// $ANTLR start "npos"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:18:1: npos : NPOS INT ( ',' INT )+ ;
	[GrammarRule("npos")]
	private AstParserRuleReturnScope<CommonTree, IToken> npos()
	{
		EnterRule_npos();
		EnterRule("npos", 6);
		TraceIn("npos", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NPOS23 = default(IToken);
		IToken INT24 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken INT26 = default(IToken);

		CommonTree NPOS23_tree = default(CommonTree);
		CommonTree INT24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree INT26_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "npos");
		DebugLocation(18, 26);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:18:6: ( NPOS INT ( ',' INT )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:18:8: NPOS INT ( ',' INT )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(18, 8);
			NPOS23=(IToken)Match(input,NPOS,Follow._NPOS_in_npos147); 
			NPOS23_tree = (CommonTree)adaptor.Create(NPOS23);
			adaptor.AddChild(root_0, NPOS23_tree);
			DebugLocation(18, 13);
			INT24=(IToken)Match(input,INT,Follow._INT_in_npos149); 
			INT24_tree = (CommonTree)adaptor.Create(INT24);
			adaptor.AddChild(root_0, INT24_tree);
			DebugLocation(18, 17);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:18:17: ( ',' INT )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==35))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:18:18: ',' INT
					{
					DebugLocation(18, 18);
					char_literal25=(IToken)Match(input,35,Follow._35_in_npos152); 
					char_literal25_tree = (CommonTree)adaptor.Create(char_literal25);
					adaptor.AddChild(root_0, char_literal25_tree);
					DebugLocation(18, 22);
					INT26=(IToken)Match(input,INT,Follow._INT_in_npos154); 
					INT26_tree = (CommonTree)adaptor.Create(INT26);
					adaptor.AddChild(root_0, INT26_tree);

					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("npos", 6);
			LeaveRule("npos", 6);
			LeaveRule_npos();
		}
		DebugLocation(18, 26);
		} finally { DebugExitRule(GrammarFileName, "npos"); }
		return retval;

	}
	// $ANTLR end "npos"

	partial void EnterRule_ostanek();
	partial void LeaveRule_ostanek();

	// $ANTLR start "ostanek"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:1: ostanek : INT ;
	[GrammarRule("ostanek")]
	private AstParserRuleReturnScope<CommonTree, IToken> ostanek()
	{
		EnterRule_ostanek();
		EnterRule("ostanek", 7);
		TraceIn("ostanek", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INT27 = default(IToken);

		CommonTree INT27_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ostanek");
		DebugLocation(19, 13);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:9: ( INT )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:11: INT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(19, 11);
			INT27=(IToken)Match(input,INT,Follow._INT_in_ostanek163); 
			INT27_tree = (CommonTree)adaptor.Create(INT27);
			adaptor.AddChild(root_0, INT27_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ostanek", 7);
			LeaveRule("ostanek", 7);
			LeaveRule_ostanek();
		}
		DebugLocation(19, 13);
		} finally { DebugExitRule(GrammarFileName, "ostanek"); }
		return retval;

	}
	// $ANTLR end "ostanek"

	partial void EnterRule_user();
	partial void LeaveRule_user();

	// $ANTLR start "user"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:20:1: user : USER INT ;
	[GrammarRule("user")]
	private AstParserRuleReturnScope<CommonTree, IToken> user()
	{
		EnterRule_user();
		EnterRule("user", 8);
		TraceIn("user", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken USER28 = default(IToken);
		IToken INT29 = default(IToken);

		CommonTree USER28_tree = default(CommonTree);
		CommonTree INT29_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "user");
		DebugLocation(20, 15);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:20:6: ( USER INT )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:20:8: USER INT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(20, 8);
			USER28=(IToken)Match(input,USER,Follow._USER_in_user170); 
			USER28_tree = (CommonTree)adaptor.Create(USER28);
			adaptor.AddChild(root_0, USER28_tree);
			DebugLocation(20, 13);
			INT29=(IToken)Match(input,INT,Follow._INT_in_user172); 
			INT29_tree = (CommonTree)adaptor.Create(INT29);
			adaptor.AddChild(root_0, INT29_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("user", 8);
			LeaveRule("user", 8);
			LeaveRule_user();
		}
		DebugLocation(20, 15);
		} finally { DebugExitRule(GrammarFileName, "user"); }
		return retval;

	}
	// $ANTLR end "user"

	partial void EnterRule_tool();
	partial void LeaveRule_tool();

	// $ANTLR start "tool"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:21:1: tool : TOOL INT ;
	[GrammarRule("tool")]
	private AstParserRuleReturnScope<CommonTree, IToken> tool()
	{
		EnterRule_tool();
		EnterRule("tool", 9);
		TraceIn("tool", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TOOL30 = default(IToken);
		IToken INT31 = default(IToken);

		CommonTree TOOL30_tree = default(CommonTree);
		CommonTree INT31_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "tool");
		DebugLocation(21, 15);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:21:6: ( TOOL INT )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:21:8: TOOL INT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(21, 8);
			TOOL30=(IToken)Match(input,TOOL,Follow._TOOL_in_tool179); 
			TOOL30_tree = (CommonTree)adaptor.Create(TOOL30);
			adaptor.AddChild(root_0, TOOL30_tree);
			DebugLocation(21, 13);
			INT31=(IToken)Match(input,INT,Follow._INT_in_tool181); 
			INT31_tree = (CommonTree)adaptor.Create(INT31);
			adaptor.AddChild(root_0, INT31_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tool", 9);
			LeaveRule("tool", 9);
			LeaveRule_tool();
		}
		DebugLocation(21, 15);
		} finally { DebugExitRule(GrammarFileName, "tool"); }
		return retval;

	}
	// $ANTLR end "tool"

	partial void EnterRule_postype();
	partial void LeaveRule_postype();

	// $ANTLR start "postype"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:22:1: postype : POSTYPE ( 'USER' | 'PULSE' ) ;
	[GrammarRule("postype")]
	private AstParserRuleReturnScope<CommonTree, IToken> postype()
	{
		EnterRule_postype();
		EnterRule("postype", 10);
		TraceIn("postype", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken POSTYPE32 = default(IToken);
		IToken set33 = default(IToken);

		CommonTree POSTYPE32_tree = default(CommonTree);
		CommonTree set33_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "postype");
		DebugLocation(22, 36);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:22:9: ( POSTYPE ( 'USER' | 'PULSE' ) )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:22:11: POSTYPE ( 'USER' | 'PULSE' )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(22, 11);
			POSTYPE32=(IToken)Match(input,POSTYPE,Follow._POSTYPE_in_postype188); 
			POSTYPE32_tree = (CommonTree)adaptor.Create(POSTYPE32);
			adaptor.AddChild(root_0, POSTYPE32_tree);
			DebugLocation(22, 19);

			set33=(IToken)input.LT(1);
			if ((input.LA(1)>=42 && input.LA(1)<=43))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set33));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postype", 10);
			LeaveRule("postype", 10);
			LeaveRule_postype();
		}
		DebugLocation(22, 36);
		} finally { DebugExitRule(GrammarFileName, "postype"); }
		return retval;

	}
	// $ANTLR end "postype"

	partial void EnterRule_rectan();
	partial void LeaveRule_rectan();

	// $ANTLR start "rectan"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:23:1: rectan : RECTAN ;
	[GrammarRule("rectan")]
	private AstParserRuleReturnScope<CommonTree, IToken> rectan()
	{
		EnterRule_rectan();
		EnterRule("rectan", 11);
		TraceIn("rectan", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken RECTAN34 = default(IToken);

		CommonTree RECTAN34_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "rectan");
		DebugLocation(23, 15);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:23:8: ( RECTAN )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:23:10: RECTAN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(23, 10);
			RECTAN34=(IToken)Match(input,RECTAN,Follow._RECTAN_in_rectan203); 
			RECTAN34_tree = (CommonTree)adaptor.Create(RECTAN34);
			adaptor.AddChild(root_0, RECTAN34_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rectan", 11);
			LeaveRule("rectan", 11);
			LeaveRule_rectan();
		}
		DebugLocation(23, 15);
		} finally { DebugExitRule(GrammarFileName, "rectan"); }
		return retval;

	}
	// $ANTLR end "rectan"

	partial void EnterRule_rconf();
	partial void LeaveRule_rconf();

	// $ANTLR start "rconf"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:1: rconf : RCONF ( '0' | '1' ) ( ',' ! ( '0' | '1' ) )+ ;
	[GrammarRule("rconf")]
	private AstParserRuleReturnScope<CommonTree, IToken> rconf()
	{
		EnterRule_rconf();
		EnterRule("rconf", 12);
		TraceIn("rconf", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken RCONF35 = default(IToken);
		IToken set36 = default(IToken);
		IToken char_literal37 = default(IToken);
		IToken set38 = default(IToken);

		CommonTree RCONF35_tree = default(CommonTree);
		CommonTree set36_tree = default(CommonTree);
		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree set38_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "rconf");
		DebugLocation(24, 41);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:7: ( RCONF ( '0' | '1' ) ( ',' ! ( '0' | '1' ) )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:9: RCONF ( '0' | '1' ) ( ',' ! ( '0' | '1' ) )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(24, 9);
			RCONF35=(IToken)Match(input,RCONF,Follow._RCONF_in_rconf210); 
			RCONF35_tree = (CommonTree)adaptor.Create(RCONF35);
			adaptor.AddChild(root_0, RCONF35_tree);
			DebugLocation(24, 15);

			set36=(IToken)input.LT(1);
			if ((input.LA(1)>=37 && input.LA(1)<=38))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set36));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(24, 25);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:25: ( ',' ! ( '0' | '1' ) )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==35))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:26: ',' ! ( '0' | '1' )
					{
					DebugLocation(24, 29);
					char_literal37=(IToken)Match(input,35,Follow._35_in_rconf219); 
					DebugLocation(24, 31);

					set38=(IToken)input.LT(1);
					if ((input.LA(1)>=37 && input.LA(1)<=38))
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set38));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rconf", 12);
			LeaveRule("rconf", 12);
			LeaveRule_rconf();
		}
		DebugLocation(24, 41);
		} finally { DebugExitRule(GrammarFileName, "rconf"); }
		return retval;

	}
	// $ANTLR end "rconf"

	partial void EnterRule_cindeks();
	partial void LeaveRule_cindeks();

	// $ANTLR start "cindeks"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:1: cindeks : INDEKS '=' ! ( MINUS )? REAL ( ',' ! ( MINUS )? REAL )+ ;
	[GrammarRule("cindeks")]
	private AstParserRuleReturnScope<CommonTree, IToken> cindeks()
	{
		EnterRule_cindeks();
		EnterRule("cindeks", 13);
		TraceIn("cindeks", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDEKS39 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken MINUS41 = default(IToken);
		IToken REAL42 = default(IToken);
		IToken char_literal43 = default(IToken);
		IToken MINUS44 = default(IToken);
		IToken REAL45 = default(IToken);

		CommonTree INDEKS39_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree MINUS41_tree = default(CommonTree);
		CommonTree REAL42_tree = default(CommonTree);
		CommonTree char_literal43_tree = default(CommonTree);
		CommonTree MINUS44_tree = default(CommonTree);
		CommonTree REAL45_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cindeks");
		DebugLocation(25, 53);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:9: ( INDEKS '=' ! ( MINUS )? REAL ( ',' ! ( MINUS )? REAL )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:11: INDEKS '=' ! ( MINUS )? REAL ( ',' ! ( MINUS )? REAL )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(25, 11);
			INDEKS39=(IToken)Match(input,INDEKS,Follow._INDEKS_in_cindeks235); 
			INDEKS39_tree = (CommonTree)adaptor.Create(INDEKS39);
			adaptor.AddChild(root_0, INDEKS39_tree);
			DebugLocation(25, 21);
			char_literal40=(IToken)Match(input,39,Follow._39_in_cindeks237); 
			DebugLocation(25, 23);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:23: ( MINUS )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==MINUS))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:23: MINUS
				{
				DebugLocation(25, 23);
				MINUS41=(IToken)Match(input,MINUS,Follow._MINUS_in_cindeks240); 
				MINUS41_tree = (CommonTree)adaptor.Create(MINUS41);
				adaptor.AddChild(root_0, MINUS41_tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(25, 30);
			REAL42=(IToken)Match(input,REAL,Follow._REAL_in_cindeks243); 
			REAL42_tree = (CommonTree)adaptor.Create(REAL42);
			adaptor.AddChild(root_0, REAL42_tree);
			DebugLocation(25, 35);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:35: ( ',' ! ( MINUS )? REAL )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==35))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:36: ',' ! ( MINUS )? REAL
					{
					DebugLocation(25, 39);
					char_literal43=(IToken)Match(input,35,Follow._35_in_cindeks246); 
					DebugLocation(25, 41);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:41: ( MINUS )?
					int alt5=2;
					try { DebugEnterSubRule(5);
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if ((LA5_0==MINUS))
					{
						alt5 = 1;
					}
					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:41: MINUS
						{
						DebugLocation(25, 41);
						MINUS44=(IToken)Match(input,MINUS,Follow._MINUS_in_cindeks249); 
						MINUS44_tree = (CommonTree)adaptor.Create(MINUS44);
						adaptor.AddChild(root_0, MINUS44_tree);

						}
						break;

					}
					} finally { DebugExitSubRule(5); }

					DebugLocation(25, 48);
					REAL45=(IToken)Match(input,REAL,Follow._REAL_in_cindeks252); 
					REAL45_tree = (CommonTree)adaptor.Create(REAL45);
					adaptor.AddChild(root_0, REAL45_tree);

					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cindeks", 13);
			LeaveRule("cindeks", 13);
			LeaveRule_cindeks();
		}
		DebugLocation(25, 53);
		} finally { DebugExitRule(GrammarFileName, "cindeks"); }
		return retval;

	}
	// $ANTLR end "cindeks"

	partial void EnterRule_inst();
	partial void LeaveRule_inst();

	// $ANTLR start "inst"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:26:1: inst : INST ;
	[GrammarRule("inst")]
	private AstParserRuleReturnScope<CommonTree, IToken> inst()
	{
		EnterRule_inst();
		EnterRule("inst", 14);
		TraceIn("inst", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INST46 = default(IToken);

		CommonTree INST46_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inst");
		DebugLocation(26, 11);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:26:6: ( INST )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:26:8: INST
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(26, 8);
			INST46=(IToken)Match(input,INST,Follow._INST_in_inst261); 
			INST46_tree = (CommonTree)adaptor.Create(INST46);
			adaptor.AddChild(root_0, INST46_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inst", 14);
			LeaveRule("inst", 14);
			LeaveRule_inst();
		}
		DebugLocation(26, 11);
		} finally { DebugExitRule(GrammarFileName, "inst"); }
		return retval;

	}
	// $ANTLR end "inst"

	partial void EnterRule_date();
	partial void LeaveRule_date();

	// $ANTLR start "date"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:1: date : DATE ( INT )+ '/' ! ( INT )+ '/' ! ( INT )+ TIME ;
	[GrammarRule("date")]
	private AstParserRuleReturnScope<CommonTree, IToken> date()
	{
		EnterRule_date();
		EnterRule("date", 15);
		TraceIn("date", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken DATE47 = default(IToken);
		IToken INT48 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken INT50 = default(IToken);
		IToken char_literal51 = default(IToken);
		IToken INT52 = default(IToken);
		IToken TIME53 = default(IToken);

		CommonTree DATE47_tree = default(CommonTree);
		CommonTree INT48_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree INT50_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree INT52_tree = default(CommonTree);
		CommonTree TIME53_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "date");
		DebugLocation(27, 41);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:6: ( DATE ( INT )+ '/' ! ( INT )+ '/' ! ( INT )+ TIME )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:8: DATE ( INT )+ '/' ! ( INT )+ '/' ! ( INT )+ TIME
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(27, 8);
			DATE47=(IToken)Match(input,DATE,Follow._DATE_in_date268); 
			DATE47_tree = (CommonTree)adaptor.Create(DATE47);
			adaptor.AddChild(root_0, DATE47_tree);
			DebugLocation(27, 13);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:13: ( INT )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==INT))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:13: INT
					{
					DebugLocation(27, 13);
					INT48=(IToken)Match(input,INT,Follow._INT_in_date270); 
					INT48_tree = (CommonTree)adaptor.Create(INT48);
					adaptor.AddChild(root_0, INT48_tree);

					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(27, 21);
			char_literal49=(IToken)Match(input,36,Follow._36_in_date273); 
			DebugLocation(27, 23);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:23: ( INT )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==INT))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:23: INT
					{
					DebugLocation(27, 23);
					INT50=(IToken)Match(input,INT,Follow._INT_in_date276); 
					INT50_tree = (CommonTree)adaptor.Create(INT50);
					adaptor.AddChild(root_0, INT50_tree);

					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(27, 31);
			char_literal51=(IToken)Match(input,36,Follow._36_in_date279); 
			DebugLocation(27, 33);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:33: ( INT )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==INT))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:33: INT
					{
					DebugLocation(27, 33);
					INT52=(IToken)Match(input,INT,Follow._INT_in_date282); 
					INT52_tree = (CommonTree)adaptor.Create(INT52);
					adaptor.AddChild(root_0, INT52_tree);

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(27, 38);
			TIME53=(IToken)Match(input,TIME,Follow._TIME_in_date285); 
			TIME53_tree = (CommonTree)adaptor.Create(TIME53);
			adaptor.AddChild(root_0, TIME53_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("date", 15);
			LeaveRule("date", 15);
			LeaveRule_date();
		}
		DebugLocation(27, 41);
		} finally { DebugExitRule(GrammarFileName, "date"); }
		return retval;

	}
	// $ANTLR end "date"

	partial void EnterRule_comm();
	partial void LeaveRule_comm();

	// $ANTLR start "comm"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:28:1: comm : COMM ( NIZ )+ ;
	[GrammarRule("comm")]
	private AstParserRuleReturnScope<CommonTree, IToken> comm()
	{
		EnterRule_comm();
		EnterRule("comm", 16);
		TraceIn("comm", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMM54 = default(IToken);
		IToken NIZ55 = default(IToken);

		CommonTree COMM54_tree = default(CommonTree);
		CommonTree NIZ55_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "comm");
		DebugLocation(28, 16);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:28:6: ( COMM ( NIZ )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:28:8: COMM ( NIZ )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(28, 8);
			COMM54=(IToken)Match(input,COMM,Follow._COMM_in_comm292); 
			COMM54_tree = (CommonTree)adaptor.Create(COMM54);
			adaptor.AddChild(root_0, COMM54_tree);
			DebugLocation(28, 13);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:28:13: ( NIZ )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==NIZ))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:28:13: NIZ
					{
					DebugLocation(28, 13);
					NIZ55=(IToken)Match(input,NIZ,Follow._NIZ_in_comm294); 
					NIZ55_tree = (CommonTree)adaptor.Create(NIZ55);
					adaptor.AddChild(root_0, NIZ55_tree);

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comm", 16);
			LeaveRule("comm", 16);
			LeaveRule_comm();
		}
		DebugLocation(28, 16);
		} finally { DebugExitRule(GrammarFileName, "comm"); }
		return retval;

	}
	// $ANTLR end "comm"

	partial void EnterRule_attr();
	partial void LeaveRule_attr();

	// $ANTLR start "attr"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:1: attr : ATTR NIZ ( ',' ! NIZ )+ ;
	[GrammarRule("attr")]
	private AstParserRuleReturnScope<CommonTree, IToken> attr()
	{
		EnterRule_attr();
		EnterRule("attr", 17);
		TraceIn("attr", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ATTR56 = default(IToken);
		IToken NIZ57 = default(IToken);
		IToken char_literal58 = default(IToken);
		IToken NIZ59 = default(IToken);

		CommonTree ATTR56_tree = default(CommonTree);
		CommonTree NIZ57_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		CommonTree NIZ59_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attr");
		DebugLocation(29, 27);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:6: ( ATTR NIZ ( ',' ! NIZ )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:8: ATTR NIZ ( ',' ! NIZ )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(29, 8);
			ATTR56=(IToken)Match(input,ATTR,Follow._ATTR_in_attr302); 
			ATTR56_tree = (CommonTree)adaptor.Create(ATTR56);
			adaptor.AddChild(root_0, ATTR56_tree);
			DebugLocation(29, 13);
			NIZ57=(IToken)Match(input,NIZ,Follow._NIZ_in_attr304); 
			NIZ57_tree = (CommonTree)adaptor.Create(NIZ57);
			adaptor.AddChild(root_0, NIZ57_tree);
			DebugLocation(29, 17);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:17: ( ',' ! NIZ )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==35))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:18: ',' ! NIZ
					{
					DebugLocation(29, 21);
					char_literal58=(IToken)Match(input,35,Follow._35_in_attr307); 
					DebugLocation(29, 23);
					NIZ59=(IToken)Match(input,NIZ,Follow._NIZ_in_attr310); 
					NIZ59_tree = (CommonTree)adaptor.Create(NIZ59);
					adaptor.AddChild(root_0, NIZ59_tree);

					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attr", 17);
			LeaveRule("attr", 17);
			LeaveRule_attr();
		}
		DebugLocation(29, 27);
		} finally { DebugExitRule(GrammarFileName, "attr"); }
		return retval;

	}
	// $ANTLR end "attr"

	partial void EnterRule_frame();
	partial void LeaveRule_frame();

	// $ANTLR start "frame"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:1: frame : FRAME 'USER' INT ;
	[GrammarRule("frame")]
	private AstParserRuleReturnScope<CommonTree, IToken> frame()
	{
		EnterRule_frame();
		EnterRule("frame", 18);
		TraceIn("frame", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken FRAME60 = default(IToken);
		IToken string_literal61 = default(IToken);
		IToken INT62 = default(IToken);

		CommonTree FRAME60_tree = default(CommonTree);
		CommonTree string_literal61_tree = default(CommonTree);
		CommonTree INT62_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "frame");
		DebugLocation(30, 24);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:7: ( FRAME 'USER' INT )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:9: FRAME 'USER' INT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(30, 9);
			FRAME60=(IToken)Match(input,FRAME,Follow._FRAME_in_frame319); 
			FRAME60_tree = (CommonTree)adaptor.Create(FRAME60);
			adaptor.AddChild(root_0, FRAME60_tree);
			DebugLocation(30, 15);
			string_literal61=(IToken)Match(input,43,Follow._43_in_frame321); 
			string_literal61_tree = (CommonTree)adaptor.Create(string_literal61);
			adaptor.AddChild(root_0, string_literal61_tree);
			DebugLocation(30, 22);
			INT62=(IToken)Match(input,INT,Follow._INT_in_frame323); 
			INT62_tree = (CommonTree)adaptor.Create(INT62);
			adaptor.AddChild(root_0, INT62_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("frame", 18);
			LeaveRule("frame", 18);
			LeaveRule_frame();
		}
		DebugLocation(30, 24);
		} finally { DebugExitRule(GrammarFileName, "frame"); }
		return retval;

	}
	// $ANTLR end "frame"

	partial void EnterRule_group();
	partial void LeaveRule_group();

	// $ANTLR start "group"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:31:1: group : GROUP NIZ ;
	[GrammarRule("group")]
	private AstParserRuleReturnScope<CommonTree, IToken> group()
	{
		EnterRule_group();
		EnterRule("group", 19);
		TraceIn("group", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken GROUP63 = default(IToken);
		IToken NIZ64 = default(IToken);

		CommonTree GROUP63_tree = default(CommonTree);
		CommonTree NIZ64_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "group");
		DebugLocation(31, 17);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:31:7: ( GROUP NIZ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:31:9: GROUP NIZ
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(31, 9);
			GROUP63=(IToken)Match(input,GROUP,Follow._GROUP_in_group330); 
			GROUP63_tree = (CommonTree)adaptor.Create(GROUP63);
			adaptor.AddChild(root_0, GROUP63_tree);
			DebugLocation(31, 15);
			NIZ64=(IToken)Match(input,NIZ,Follow._NIZ_in_group332); 
			NIZ64_tree = (CommonTree)adaptor.Create(NIZ64);
			adaptor.AddChild(root_0, NIZ64_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("group", 19);
			LeaveRule("group", 19);
			LeaveRule_group();
		}
		DebugLocation(31, 17);
		} finally { DebugExitRule(GrammarFileName, "group"); }
		return retval;

	}
	// $ANTLR end "group"

	partial void EnterRule_main();
	partial void LeaveRule_main();

	// $ANTLR start "main"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:1: main : 'NOP' ukazi 'END' ;
	[GrammarRule("main")]
	private AstParserRuleReturnScope<CommonTree, IToken> main()
	{
		EnterRule_main();
		EnterRule("main", 20);
		TraceIn("main", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal65 = default(IToken);
		IToken string_literal67 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ukazi66 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal65_tree = default(CommonTree);
		CommonTree string_literal67_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "main");
		DebugLocation(32, 24);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:6: ( 'NOP' ukazi 'END' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:8: 'NOP' ukazi 'END'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(32, 8);
			string_literal65=(IToken)Match(input,41,Follow._41_in_main339); 
			string_literal65_tree = (CommonTree)adaptor.Create(string_literal65);
			adaptor.AddChild(root_0, string_literal65_tree);
			DebugLocation(32, 14);
			PushFollow(Follow._ukazi_in_main341);
			ukazi66=ukazi();
			PopFollow();

			adaptor.AddChild(root_0, ukazi66.Tree);
			DebugLocation(32, 20);
			string_literal67=(IToken)Match(input,40,Follow._40_in_main343); 
			string_literal67_tree = (CommonTree)adaptor.Create(string_literal67);
			adaptor.AddChild(root_0, string_literal67_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("main", 20);
			LeaveRule("main", 20);
			LeaveRule_main();
		}
		DebugLocation(32, 24);
		} finally { DebugExitRule(GrammarFileName, "main"); }
		return retval;

	}
	// $ANTLR end "main"

	partial void EnterRule_ukazi();
	partial void LeaveRule_ukazi();

	// $ANTLR start "ukazi"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:33:1: ukazi : premik DOUT ONOFF TIMER '=' ! REAL premiki DOUT ONOFF premik ;
	[GrammarRule("ukazi")]
	private AstParserRuleReturnScope<CommonTree, IToken> ukazi()
	{
		EnterRule_ukazi();
		EnterRule("ukazi", 21);
		TraceIn("ukazi", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken DOUT69 = default(IToken);
		IToken ONOFF70 = default(IToken);
		IToken TIMER71 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken REAL73 = default(IToken);
		IToken DOUT75 = default(IToken);
		IToken ONOFF76 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> premik68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> premiki74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> premik77 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOUT69_tree = default(CommonTree);
		CommonTree ONOFF70_tree = default(CommonTree);
		CommonTree TIMER71_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		CommonTree REAL73_tree = default(CommonTree);
		CommonTree DOUT75_tree = default(CommonTree);
		CommonTree ONOFF76_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ukazi");
		DebugLocation(33, 67);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:33:7: ( premik DOUT ONOFF TIMER '=' ! REAL premiki DOUT ONOFF premik )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:33:9: premik DOUT ONOFF TIMER '=' ! REAL premiki DOUT ONOFF premik
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(33, 9);
			PushFollow(Follow._premik_in_ukazi350);
			premik68=premik();
			PopFollow();

			adaptor.AddChild(root_0, premik68.Tree);
			DebugLocation(33, 16);
			DOUT69=(IToken)Match(input,DOUT,Follow._DOUT_in_ukazi352); 
			DOUT69_tree = (CommonTree)adaptor.Create(DOUT69);
			adaptor.AddChild(root_0, DOUT69_tree);
			DebugLocation(33, 21);
			ONOFF70=(IToken)Match(input,ONOFF,Follow._ONOFF_in_ukazi354); 
			ONOFF70_tree = (CommonTree)adaptor.Create(ONOFF70);
			adaptor.AddChild(root_0, ONOFF70_tree);
			DebugLocation(33, 27);
			TIMER71=(IToken)Match(input,TIMER,Follow._TIMER_in_ukazi356); 
			TIMER71_tree = (CommonTree)adaptor.Create(TIMER71);
			adaptor.AddChild(root_0, TIMER71_tree);
			DebugLocation(33, 36);
			char_literal72=(IToken)Match(input,39,Follow._39_in_ukazi358); 
			DebugLocation(33, 38);
			REAL73=(IToken)Match(input,REAL,Follow._REAL_in_ukazi361); 
			REAL73_tree = (CommonTree)adaptor.Create(REAL73);
			adaptor.AddChild(root_0, REAL73_tree);
			DebugLocation(33, 43);
			PushFollow(Follow._premiki_in_ukazi363);
			premiki74=premiki();
			PopFollow();

			adaptor.AddChild(root_0, premiki74.Tree);
			DebugLocation(33, 51);
			DOUT75=(IToken)Match(input,DOUT,Follow._DOUT_in_ukazi365); 
			DOUT75_tree = (CommonTree)adaptor.Create(DOUT75);
			adaptor.AddChild(root_0, DOUT75_tree);
			DebugLocation(33, 56);
			ONOFF76=(IToken)Match(input,ONOFF,Follow._ONOFF_in_ukazi367); 
			ONOFF76_tree = (CommonTree)adaptor.Create(ONOFF76);
			adaptor.AddChild(root_0, ONOFF76_tree);
			DebugLocation(33, 62);
			PushFollow(Follow._premik_in_ukazi369);
			premik77=premik();
			PopFollow();

			adaptor.AddChild(root_0, premik77.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ukazi", 21);
			LeaveRule("ukazi", 21);
			LeaveRule_ukazi();
		}
		DebugLocation(33, 67);
		} finally { DebugExitRule(GrammarFileName, "ukazi"); }
		return retval;

	}
	// $ANTLR end "ukazi"

	partial void EnterRule_premiki();
	partial void LeaveRule_premiki();

	// $ANTLR start "premiki"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:1: premiki : ( premik premiki | premik );
	[GrammarRule("premiki")]
	private AstParserRuleReturnScope<CommonTree, IToken> premiki()
	{
		EnterRule_premiki();
		EnterRule("premiki", 22);
		TraceIn("premiki", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> premik78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> premiki79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> premik80 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "premiki");
		DebugLocation(34, 33);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:9: ( premik premiki | premik )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case MOVJ:
				{
				int LA12_1 = input.LA(2);

				if ((LA12_1==INDEKS))
				{
					int LA12_5 = input.LA(3);

					if ((LA12_5==45))
					{
						int LA12_9 = input.LA(4);

						if ((LA12_9==39))
						{
							int LA12_13 = input.LA(5);

							if ((LA12_13==REAL))
							{
								int LA12_17 = input.LA(6);

								if (((LA12_17>=MOVC && LA12_17<=MOVS)))
								{
									alt12 = 1;
								}
								else if ((LA12_17==DOUT))
								{
									alt12 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 12, 17, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 12, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 12, 9, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 12, 5, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MOVL:
				{
				int LA12_2 = input.LA(2);

				if ((LA12_2==INDEKS))
				{
					int LA12_6 = input.LA(3);

					if ((LA12_6==44))
					{
						int LA12_10 = input.LA(4);

						if ((LA12_10==39))
						{
							int LA12_14 = input.LA(5);

							if ((LA12_14==REAL))
							{
								int LA12_18 = input.LA(6);

								if (((LA12_18>=MOVC && LA12_18<=MOVS)))
								{
									alt12 = 1;
								}
								else if ((LA12_18==DOUT))
								{
									alt12 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 12, 18, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 12, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 12, 10, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 12, 6, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MOVC:
				{
				int LA12_3 = input.LA(2);

				if ((LA12_3==INDEKS))
				{
					int LA12_7 = input.LA(3);

					if ((LA12_7==44))
					{
						int LA12_11 = input.LA(4);

						if ((LA12_11==39))
						{
							int LA12_15 = input.LA(5);

							if ((LA12_15==REAL))
							{
								int LA12_19 = input.LA(6);

								if (((LA12_19>=MOVC && LA12_19<=MOVS)))
								{
									alt12 = 1;
								}
								else if ((LA12_19==DOUT))
								{
									alt12 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 12, 19, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 12, 15, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 12, 11, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 12, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MOVS:
				{
				int LA12_4 = input.LA(2);

				if ((LA12_4==INDEKS))
				{
					int LA12_8 = input.LA(3);

					if ((LA12_8==44))
					{
						int LA12_12 = input.LA(4);

						if ((LA12_12==39))
						{
							int LA12_16 = input.LA(5);

							if ((LA12_16==REAL))
							{
								int LA12_20 = input.LA(6);

								if (((LA12_20>=MOVC && LA12_20<=MOVS)))
								{
									alt12 = 1;
								}
								else if ((LA12_20==DOUT))
								{
									alt12 = 2;
								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 12, 20, input);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 12, 16, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 12, 12, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 12, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:11: premik premiki
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(34, 11);
				PushFollow(Follow._premik_in_premiki376);
				premik78=premik();
				PopFollow();

				adaptor.AddChild(root_0, premik78.Tree);
				DebugLocation(34, 18);
				PushFollow(Follow._premiki_in_premiki378);
				premiki79=premiki();
				PopFollow();

				adaptor.AddChild(root_0, premiki79.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:28: premik
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(34, 28);
				PushFollow(Follow._premik_in_premiki382);
				premik80=premik();
				PopFollow();

				adaptor.AddChild(root_0, premik80.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("premiki", 22);
			LeaveRule("premiki", 22);
			LeaveRule_premiki();
		}
		DebugLocation(34, 33);
		} finally { DebugExitRule(GrammarFileName, "premiki"); }
		return retval;

	}
	// $ANTLR end "premiki"

	partial void EnterRule_premik();
	partial void LeaveRule_premik();

	// $ANTLR start "premik"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:1: premik : ( ( MOVJ INDEKS 'VJ' '=' ! REAL ) | ( MOVL INDEKS 'V' '=' ! REAL ) | ( MOVC INDEKS 'V' '=' ! REAL ) | ( MOVS INDEKS 'V' '=' ! REAL ) );
	[GrammarRule("premik")]
	private AstParserRuleReturnScope<CommonTree, IToken> premik()
	{
		EnterRule_premik();
		EnterRule("premik", 23);
		TraceIn("premik", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken MOVJ81 = default(IToken);
		IToken INDEKS82 = default(IToken);
		IToken string_literal83 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken REAL85 = default(IToken);
		IToken MOVL86 = default(IToken);
		IToken INDEKS87 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken char_literal89 = default(IToken);
		IToken REAL90 = default(IToken);
		IToken MOVC91 = default(IToken);
		IToken INDEKS92 = default(IToken);
		IToken char_literal93 = default(IToken);
		IToken char_literal94 = default(IToken);
		IToken REAL95 = default(IToken);
		IToken MOVS96 = default(IToken);
		IToken INDEKS97 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken REAL100 = default(IToken);

		CommonTree MOVJ81_tree = default(CommonTree);
		CommonTree INDEKS82_tree = default(CommonTree);
		CommonTree string_literal83_tree = default(CommonTree);
		CommonTree char_literal84_tree = default(CommonTree);
		CommonTree REAL85_tree = default(CommonTree);
		CommonTree MOVL86_tree = default(CommonTree);
		CommonTree INDEKS87_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree REAL90_tree = default(CommonTree);
		CommonTree MOVC91_tree = default(CommonTree);
		CommonTree INDEKS92_tree = default(CommonTree);
		CommonTree char_literal93_tree = default(CommonTree);
		CommonTree char_literal94_tree = default(CommonTree);
		CommonTree REAL95_tree = default(CommonTree);
		CommonTree MOVS96_tree = default(CommonTree);
		CommonTree INDEKS97_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree REAL100_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "premik");
		DebugLocation(35, 127);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:8: ( ( MOVJ INDEKS 'VJ' '=' ! REAL ) | ( MOVL INDEKS 'V' '=' ! REAL ) | ( MOVC INDEKS 'V' '=' ! REAL ) | ( MOVS INDEKS 'V' '=' ! REAL ) )
			int alt13=4;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case MOVJ:
				{
				alt13 = 1;
				}
				break;
			case MOVL:
				{
				alt13 = 2;
				}
				break;
			case MOVC:
				{
				alt13 = 3;
				}
				break;
			case MOVS:
				{
				alt13 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:10: ( MOVJ INDEKS 'VJ' '=' ! REAL )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(35, 10);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:10: ( MOVJ INDEKS 'VJ' '=' ! REAL )
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:11: MOVJ INDEKS 'VJ' '=' ! REAL
				{
				DebugLocation(35, 11);
				MOVJ81=(IToken)Match(input,MOVJ,Follow._MOVJ_in_premik390); 
				MOVJ81_tree = (CommonTree)adaptor.Create(MOVJ81);
				adaptor.AddChild(root_0, MOVJ81_tree);
				DebugLocation(35, 16);
				INDEKS82=(IToken)Match(input,INDEKS,Follow._INDEKS_in_premik392); 
				INDEKS82_tree = (CommonTree)adaptor.Create(INDEKS82);
				adaptor.AddChild(root_0, INDEKS82_tree);
				DebugLocation(35, 23);
				string_literal83=(IToken)Match(input,45,Follow._45_in_premik394); 
				string_literal83_tree = (CommonTree)adaptor.Create(string_literal83);
				adaptor.AddChild(root_0, string_literal83_tree);
				DebugLocation(35, 31);
				char_literal84=(IToken)Match(input,39,Follow._39_in_premik396); 
				DebugLocation(35, 33);
				REAL85=(IToken)Match(input,REAL,Follow._REAL_in_premik399); 
				REAL85_tree = (CommonTree)adaptor.Create(REAL85);
				adaptor.AddChild(root_0, REAL85_tree);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:41: ( MOVL INDEKS 'V' '=' ! REAL )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(35, 41);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:41: ( MOVL INDEKS 'V' '=' ! REAL )
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:42: MOVL INDEKS 'V' '=' ! REAL
				{
				DebugLocation(35, 42);
				MOVL86=(IToken)Match(input,MOVL,Follow._MOVL_in_premik405); 
				MOVL86_tree = (CommonTree)adaptor.Create(MOVL86);
				adaptor.AddChild(root_0, MOVL86_tree);
				DebugLocation(35, 47);
				INDEKS87=(IToken)Match(input,INDEKS,Follow._INDEKS_in_premik407); 
				INDEKS87_tree = (CommonTree)adaptor.Create(INDEKS87);
				adaptor.AddChild(root_0, INDEKS87_tree);
				DebugLocation(35, 54);
				char_literal88=(IToken)Match(input,44,Follow._44_in_premik409); 
				char_literal88_tree = (CommonTree)adaptor.Create(char_literal88);
				adaptor.AddChild(root_0, char_literal88_tree);
				DebugLocation(35, 61);
				char_literal89=(IToken)Match(input,39,Follow._39_in_premik411); 
				DebugLocation(35, 63);
				REAL90=(IToken)Match(input,REAL,Follow._REAL_in_premik414); 
				REAL90_tree = (CommonTree)adaptor.Create(REAL90);
				adaptor.AddChild(root_0, REAL90_tree);

				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:71: ( MOVC INDEKS 'V' '=' ! REAL )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(35, 71);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:71: ( MOVC INDEKS 'V' '=' ! REAL )
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:72: MOVC INDEKS 'V' '=' ! REAL
				{
				DebugLocation(35, 72);
				MOVC91=(IToken)Match(input,MOVC,Follow._MOVC_in_premik420); 
				MOVC91_tree = (CommonTree)adaptor.Create(MOVC91);
				adaptor.AddChild(root_0, MOVC91_tree);
				DebugLocation(35, 77);
				INDEKS92=(IToken)Match(input,INDEKS,Follow._INDEKS_in_premik422); 
				INDEKS92_tree = (CommonTree)adaptor.Create(INDEKS92);
				adaptor.AddChild(root_0, INDEKS92_tree);
				DebugLocation(35, 84);
				char_literal93=(IToken)Match(input,44,Follow._44_in_premik424); 
				char_literal93_tree = (CommonTree)adaptor.Create(char_literal93);
				adaptor.AddChild(root_0, char_literal93_tree);
				DebugLocation(35, 91);
				char_literal94=(IToken)Match(input,39,Follow._39_in_premik426); 
				DebugLocation(35, 93);
				REAL95=(IToken)Match(input,REAL,Follow._REAL_in_premik429); 
				REAL95_tree = (CommonTree)adaptor.Create(REAL95);
				adaptor.AddChild(root_0, REAL95_tree);

				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:101: ( MOVS INDEKS 'V' '=' ! REAL )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(35, 101);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:101: ( MOVS INDEKS 'V' '=' ! REAL )
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:102: MOVS INDEKS 'V' '=' ! REAL
				{
				DebugLocation(35, 102);
				MOVS96=(IToken)Match(input,MOVS,Follow._MOVS_in_premik435); 
				MOVS96_tree = (CommonTree)adaptor.Create(MOVS96);
				adaptor.AddChild(root_0, MOVS96_tree);
				DebugLocation(35, 107);
				INDEKS97=(IToken)Match(input,INDEKS,Follow._INDEKS_in_premik437); 
				INDEKS97_tree = (CommonTree)adaptor.Create(INDEKS97);
				adaptor.AddChild(root_0, INDEKS97_tree);
				DebugLocation(35, 114);
				char_literal98=(IToken)Match(input,44,Follow._44_in_premik439); 
				char_literal98_tree = (CommonTree)adaptor.Create(char_literal98);
				adaptor.AddChild(root_0, char_literal98_tree);
				DebugLocation(35, 121);
				char_literal99=(IToken)Match(input,39,Follow._39_in_premik441); 
				DebugLocation(35, 123);
				REAL100=(IToken)Match(input,REAL,Follow._REAL_in_premik444); 
				REAL100_tree = (CommonTree)adaptor.Create(REAL100);
				adaptor.AddChild(root_0, REAL100_tree);

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("premik", 23);
			LeaveRule("premik", 23);
			LeaveRule_premik();
		}
		DebugLocation(35, 127);
		} finally { DebugExitRule(GrammarFileName, "premik"); }
		return retval;

	}
	// $ANTLR end "premik"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _prog_in_start37 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _job_in_prog45 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _name_in_prog47 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _pos_in_prog49 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _npos_in_prog51 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _user_in_prog53 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _tool_in_prog55 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _postype_in_prog57 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _rectan_in_prog59 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _rconf_in_prog61 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _cindeks_in_prog63 = new BitSet(new ulong[]{0x1800UL});
		public static readonly BitSet _inst_in_prog66 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _date_in_prog68 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _comm_in_prog70 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _attr_in_prog72 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _frame_in_prog74 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _group_in_prog76 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _main_in_prog78 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JOB_in_job124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_name131 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _NIZ_in_name133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POS_in_pos140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NPOS_in_npos147 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INT_in_npos149 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_npos152 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INT_in_npos154 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _INT_in_ostanek163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USER_in_user170 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INT_in_user172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOOL_in_tool179 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INT_in_tool181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POSTYPE_in_postype188 = new BitSet(new ulong[]{0xC0000000000UL});
		public static readonly BitSet _set_in_postype190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RECTAN_in_rectan203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RCONF_in_rconf210 = new BitSet(new ulong[]{0x6000000000UL});
		public static readonly BitSet _set_in_rconf212 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_rconf219 = new BitSet(new ulong[]{0x6000000000UL});
		public static readonly BitSet _set_in_rconf222 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _INDEKS_in_cindeks235 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_cindeks237 = new BitSet(new ulong[]{0x10008000UL});
		public static readonly BitSet _MINUS_in_cindeks240 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _REAL_in_cindeks243 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_cindeks246 = new BitSet(new ulong[]{0x10008000UL});
		public static readonly BitSet _MINUS_in_cindeks249 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _REAL_in_cindeks252 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _INST_in_inst261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATE_in_date268 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INT_in_date270 = new BitSet(new ulong[]{0x1000002000UL});
		public static readonly BitSet _36_in_date273 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INT_in_date276 = new BitSet(new ulong[]{0x1000002000UL});
		public static readonly BitSet _36_in_date279 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INT_in_date282 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _TIME_in_date285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMM_in_comm292 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _NIZ_in_comm294 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _ATTR_in_attr302 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _NIZ_in_attr304 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _35_in_attr307 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _NIZ_in_attr310 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _FRAME_in_frame319 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_frame321 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _INT_in_frame323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_group330 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _NIZ_in_group332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_main339 = new BitSet(new ulong[]{0xF0000UL});
		public static readonly BitSet _ukazi_in_main341 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_main343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _premik_in_ukazi350 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DOUT_in_ukazi352 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ONOFF_in_ukazi354 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _TIMER_in_ukazi356 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_ukazi358 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _REAL_in_ukazi361 = new BitSet(new ulong[]{0xF0000UL});
		public static readonly BitSet _premiki_in_ukazi363 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DOUT_in_ukazi365 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ONOFF_in_ukazi367 = new BitSet(new ulong[]{0xF0000UL});
		public static readonly BitSet _premik_in_ukazi369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _premik_in_premiki376 = new BitSet(new ulong[]{0xF0000UL});
		public static readonly BitSet _premiki_in_premiki378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _premik_in_premiki382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MOVJ_in_premik390 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _INDEKS_in_premik392 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_premik394 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_premik396 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _REAL_in_premik399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MOVL_in_premik405 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _INDEKS_in_premik407 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_premik409 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_premik411 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _REAL_in_premik414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MOVC_in_premik420 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _INDEKS_in_premik422 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_premik424 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_premik426 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _REAL_in_premik429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MOVS_in_premik435 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _INDEKS_in_premik437 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_premik439 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_premik441 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _REAL_in_premik444 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
