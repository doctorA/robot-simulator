//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g 2012-02-08 16:36:32

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class RobotLanguageParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ATTR", "COMM", "DATE", "DIN", "DOUT", "FRAME", "GROUP", "INST", "INT", "JOB", "MOVC", "MOVJ", "MOVL", "MOVS", "NAME", "NEWLINE", "NIZ", "NPOS", "POS", "POSTYPE", "RCONF", "REAL", "RECTAN", "TIME", "TIMER", "TOOL", "USER", "WS", "','", "'-'", "'/'", "'0'", "'1'", "'='", "'A'", "'C'", "'END'", "'NOP'", "'PULSE'", "'USER'", "'V'", "'VJ'", "'Z'"
	};
	public const int EOF=-1;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int ATTR=4;
	public const int COMM=5;
	public const int DATE=6;
	public const int DIN=7;
	public const int DOUT=8;
	public const int FRAME=9;
	public const int GROUP=10;
	public const int INST=11;
	public const int INT=12;
	public const int JOB=13;
	public const int MOVC=14;
	public const int MOVJ=15;
	public const int MOVL=16;
	public const int MOVS=17;
	public const int NAME=18;
	public const int NEWLINE=19;
	public const int NIZ=20;
	public const int NPOS=21;
	public const int POS=22;
	public const int POSTYPE=23;
	public const int RCONF=24;
	public const int REAL=25;
	public const int RECTAN=26;
	public const int TIME=27;
	public const int TIMER=28;
	public const int TOOL=29;
	public const int USER=30;
	public const int WS=31;

	public RobotLanguageParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public RobotLanguageParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return RobotLanguageParser.tokenNames; } }
	public override string GrammarFileName { get { return "D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_start();
	partial void LeaveRule_start();

	// $ANTLR start "start"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:10:8: public start : prog ;
	[GrammarRule("start")]
	public AstParserRuleReturnScope<CommonTree, IToken> start()
	{
		EnterRule_start();
		EnterRule("start", 1);
		TraceIn("start", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prog1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "start");
		DebugLocation(10, 2);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:11:2: ( prog )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:11:4: prog
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(11, 4);
			PushFollow(Follow._prog_in_start37);
			prog1=prog();
			PopFollow();

			adaptor.AddChild(root_0, prog1.Tree);
			DebugLocation(12, 2);

				 if ((prog1!=null?((CommonTree)prog1.Tree):default(CommonTree)) != null)
				  System.Console.WriteLine((prog1!=null?((CommonTree)prog1.Tree):default(CommonTree)).ToStringTree());
			         else 
			 	  System.Console.WriteLine("drevo je prazno");
				

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("start", 1);
			LeaveRule("start", 1);
			LeaveRule_start();
		}
		DebugLocation(17, 2);
		} finally { DebugExitRule(GrammarFileName, "start"); }
		return retval;

	}
	// $ANTLR end "start"

	partial void EnterRule_prog();
	partial void LeaveRule_prog();

	// $ANTLR start "prog"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:1: prog : job name pos npos user tool postype rectan ( ( rconf )? cindeks )+ inst date comm attr frame group main -> job name pos npos user tool postype rectan rconf cindeks inst date comm attr frame group main ;
	[GrammarRule("prog")]
	private AstParserRuleReturnScope<CommonTree, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 2);
		TraceIn("prog", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> job2 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> name3 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> pos4 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> npos5 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> user6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> tool7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> postype8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> rectan9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> rconf10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cindeks11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inst12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> date13 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> comm14 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attr15 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> frame16 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> group17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> main18 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_comm=new RewriteRuleSubtreeStream(adaptor,"rule comm");
		RewriteRuleSubtreeStream stream_rectan=new RewriteRuleSubtreeStream(adaptor,"rule rectan");
		RewriteRuleSubtreeStream stream_tool=new RewriteRuleSubtreeStream(adaptor,"rule tool");
		RewriteRuleSubtreeStream stream_job=new RewriteRuleSubtreeStream(adaptor,"rule job");
		RewriteRuleSubtreeStream stream_attr=new RewriteRuleSubtreeStream(adaptor,"rule attr");
		RewriteRuleSubtreeStream stream_inst=new RewriteRuleSubtreeStream(adaptor,"rule inst");
		RewriteRuleSubtreeStream stream_date=new RewriteRuleSubtreeStream(adaptor,"rule date");
		RewriteRuleSubtreeStream stream_main=new RewriteRuleSubtreeStream(adaptor,"rule main");
		RewriteRuleSubtreeStream stream_pos=new RewriteRuleSubtreeStream(adaptor,"rule pos");
		RewriteRuleSubtreeStream stream_postype=new RewriteRuleSubtreeStream(adaptor,"rule postype");
		RewriteRuleSubtreeStream stream_frame=new RewriteRuleSubtreeStream(adaptor,"rule frame");
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
		RewriteRuleSubtreeStream stream_rconf=new RewriteRuleSubtreeStream(adaptor,"rule rconf");
		RewriteRuleSubtreeStream stream_group=new RewriteRuleSubtreeStream(adaptor,"rule group");
		RewriteRuleSubtreeStream stream_user=new RewriteRuleSubtreeStream(adaptor,"rule user");
		RewriteRuleSubtreeStream stream_cindeks=new RewriteRuleSubtreeStream(adaptor,"rule cindeks");
		RewriteRuleSubtreeStream stream_npos=new RewriteRuleSubtreeStream(adaptor,"rule npos");
		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(19, 201);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:6: ( job name pos npos user tool postype rectan ( ( rconf )? cindeks )+ inst date comm attr frame group main -> job name pos npos user tool postype rectan rconf cindeks inst date comm attr frame group main )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:8: job name pos npos user tool postype rectan ( ( rconf )? cindeks )+ inst date comm attr frame group main
			{
			DebugLocation(19, 8);
			PushFollow(Follow._job_in_prog49);
			job2=job();
			PopFollow();

			stream_job.Add(job2.Tree);
			DebugLocation(19, 12);
			PushFollow(Follow._name_in_prog51);
			name3=name();
			PopFollow();

			stream_name.Add(name3.Tree);
			DebugLocation(19, 17);
			PushFollow(Follow._pos_in_prog53);
			pos4=pos();
			PopFollow();

			stream_pos.Add(pos4.Tree);
			DebugLocation(19, 21);
			PushFollow(Follow._npos_in_prog55);
			npos5=npos();
			PopFollow();

			stream_npos.Add(npos5.Tree);
			DebugLocation(19, 26);
			PushFollow(Follow._user_in_prog57);
			user6=user();
			PopFollow();

			stream_user.Add(user6.Tree);
			DebugLocation(19, 31);
			PushFollow(Follow._tool_in_prog59);
			tool7=tool();
			PopFollow();

			stream_tool.Add(tool7.Tree);
			DebugLocation(19, 36);
			PushFollow(Follow._postype_in_prog61);
			postype8=postype();
			PopFollow();

			stream_postype.Add(postype8.Tree);
			DebugLocation(19, 44);
			PushFollow(Follow._rectan_in_prog63);
			rectan9=rectan();
			PopFollow();

			stream_rectan.Add(rectan9.Tree);
			DebugLocation(19, 51);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:51: ( ( rconf )? cindeks )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0==RCONF||LA2_0==39))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:52: ( rconf )? cindeks
					{
					DebugLocation(19, 52);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:52: ( rconf )?
					int alt1=2;
					try { DebugEnterSubRule(1);
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==RCONF))
					{
						alt1 = 1;
					}
					} finally { DebugExitDecision(1); }
					switch (alt1)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:52: rconf
						{
						DebugLocation(19, 52);
						PushFollow(Follow._rconf_in_prog66);
						rconf10=rconf();
						PopFollow();

						stream_rconf.Add(rconf10.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(1); }

					DebugLocation(19, 59);
					PushFollow(Follow._cindeks_in_prog69);
					cindeks11=cindeks();
					PopFollow();

					stream_cindeks.Add(cindeks11.Tree);

					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(19, 69);
			PushFollow(Follow._inst_in_prog73);
			inst12=inst();
			PopFollow();

			stream_inst.Add(inst12.Tree);
			DebugLocation(19, 74);
			PushFollow(Follow._date_in_prog75);
			date13=date();
			PopFollow();

			stream_date.Add(date13.Tree);
			DebugLocation(19, 79);
			PushFollow(Follow._comm_in_prog77);
			comm14=comm();
			PopFollow();

			stream_comm.Add(comm14.Tree);
			DebugLocation(19, 84);
			PushFollow(Follow._attr_in_prog79);
			attr15=attr();
			PopFollow();

			stream_attr.Add(attr15.Tree);
			DebugLocation(19, 89);
			PushFollow(Follow._frame_in_prog81);
			frame16=frame();
			PopFollow();

			stream_frame.Add(frame16.Tree);
			DebugLocation(19, 95);
			PushFollow(Follow._group_in_prog83);
			group17=group();
			PopFollow();

			stream_group.Add(group17.Tree);
			DebugLocation(19, 101);
			PushFollow(Follow._main_in_prog85);
			main18=main();
			PopFollow();

			stream_main.Add(main18.Tree);


			{
			// AST REWRITE
			// elements: date, job, tool, npos, postype, inst, name, group, pos, cindeks, rconf, attr, frame, user, comm, main, rectan
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 19:106: -> job name pos npos user tool postype rectan rconf cindeks inst date comm attr frame group main
			{
				DebugLocation(19, 109);
				adaptor.AddChild(root_0, stream_job.NextTree());
				DebugLocation(19, 113);
				adaptor.AddChild(root_0, stream_name.NextTree());
				DebugLocation(19, 118);
				adaptor.AddChild(root_0, stream_pos.NextTree());
				DebugLocation(19, 122);
				adaptor.AddChild(root_0, stream_npos.NextTree());
				DebugLocation(19, 127);
				adaptor.AddChild(root_0, stream_user.NextTree());
				DebugLocation(19, 132);
				adaptor.AddChild(root_0, stream_tool.NextTree());
				DebugLocation(19, 137);
				adaptor.AddChild(root_0, stream_postype.NextTree());
				DebugLocation(19, 145);
				adaptor.AddChild(root_0, stream_rectan.NextTree());
				DebugLocation(19, 152);
				adaptor.AddChild(root_0, stream_rconf.NextTree());
				DebugLocation(19, 158);
				adaptor.AddChild(root_0, stream_cindeks.NextTree());
				DebugLocation(19, 166);
				adaptor.AddChild(root_0, stream_inst.NextTree());
				DebugLocation(19, 171);
				adaptor.AddChild(root_0, stream_date.NextTree());
				DebugLocation(19, 176);
				adaptor.AddChild(root_0, stream_comm.NextTree());
				DebugLocation(19, 181);
				adaptor.AddChild(root_0, stream_attr.NextTree());
				DebugLocation(19, 186);
				adaptor.AddChild(root_0, stream_frame.NextTree());
				DebugLocation(19, 192);
				adaptor.AddChild(root_0, stream_group.NextTree());
				DebugLocation(19, 198);
				adaptor.AddChild(root_0, stream_main.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 2);
			LeaveRule("prog", 2);
			LeaveRule_prog();
		}
		DebugLocation(19, 201);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_job();
	partial void LeaveRule_job();

	// $ANTLR start "job"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:21:1: job : JOB ;
	[GrammarRule("job")]
	private AstParserRuleReturnScope<CommonTree, IToken> job()
	{
		EnterRule_job();
		EnterRule("job", 3);
		TraceIn("job", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken JOB19 = default(IToken);

		CommonTree JOB19_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "job");
		DebugLocation(21, 10);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:21:6: ( JOB )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:21:8: JOB
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(21, 8);
			JOB19=(IToken)Match(input,JOB,Follow._JOB_in_job130); 
			JOB19_tree = (CommonTree)adaptor.Create(JOB19);
			adaptor.AddChild(root_0, JOB19_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("job", 3);
			LeaveRule("job", 3);
			LeaveRule_job();
		}
		DebugLocation(21, 10);
		} finally { DebugExitRule(GrammarFileName, "job"); }
		return retval;

	}
	// $ANTLR end "job"

	partial void EnterRule_name();
	partial void LeaveRule_name();

	// $ANTLR start "name"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:22:1: name : NAME NIZ ;
	[GrammarRule("name")]
	private AstParserRuleReturnScope<CommonTree, IToken> name()
	{
		EnterRule_name();
		EnterRule("name", 4);
		TraceIn("name", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NAME20 = default(IToken);
		IToken NIZ21 = default(IToken);

		CommonTree NAME20_tree = default(CommonTree);
		CommonTree NIZ21_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(22, 15);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:22:6: ( NAME NIZ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:22:8: NAME NIZ
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(22, 8);
			NAME20=(IToken)Match(input,NAME,Follow._NAME_in_name137); 
			NAME20_tree = (CommonTree)adaptor.Create(NAME20);
			adaptor.AddChild(root_0, NAME20_tree);
			DebugLocation(22, 13);
			NIZ21=(IToken)Match(input,NIZ,Follow._NIZ_in_name139); 
			NIZ21_tree = (CommonTree)adaptor.Create(NIZ21);
			adaptor.AddChild(root_0, NIZ21_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("name", 4);
			LeaveRule("name", 4);
			LeaveRule_name();
		}
		DebugLocation(22, 15);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return retval;

	}
	// $ANTLR end "name"

	partial void EnterRule_pos();
	partial void LeaveRule_pos();

	// $ANTLR start "pos"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:23:1: pos : POS ;
	[GrammarRule("pos")]
	private AstParserRuleReturnScope<CommonTree, IToken> pos()
	{
		EnterRule_pos();
		EnterRule("pos", 5);
		TraceIn("pos", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken POS22 = default(IToken);

		CommonTree POS22_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "pos");
		DebugLocation(23, 9);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:23:5: ( POS )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:23:7: POS
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(23, 7);
			POS22=(IToken)Match(input,POS,Follow._POS_in_pos146); 
			POS22_tree = (CommonTree)adaptor.Create(POS22);
			adaptor.AddChild(root_0, POS22_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pos", 5);
			LeaveRule("pos", 5);
			LeaveRule_pos();
		}
		DebugLocation(23, 9);
		} finally { DebugExitRule(GrammarFileName, "pos"); }
		return retval;

	}
	// $ANTLR end "pos"

	partial void EnterRule_npos();
	partial void LeaveRule_npos();

	// $ANTLR start "npos"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:1: npos : NPOS INT ( ( ',' )? ( '-' )? INT )+ ;
	[GrammarRule("npos")]
	private AstParserRuleReturnScope<CommonTree, IToken> npos()
	{
		EnterRule_npos();
		EnterRule("npos", 6);
		TraceIn("npos", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NPOS23 = default(IToken);
		IToken INT24 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken INT27 = default(IToken);

		CommonTree NPOS23_tree = default(CommonTree);
		CommonTree INT24_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree INT27_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "npos");
		DebugLocation(24, 32);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:6: ( NPOS INT ( ( ',' )? ( '-' )? INT )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:8: NPOS INT ( ( ',' )? ( '-' )? INT )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(24, 8);
			NPOS23=(IToken)Match(input,NPOS,Follow._NPOS_in_npos153); 
			NPOS23_tree = (CommonTree)adaptor.Create(NPOS23);
			adaptor.AddChild(root_0, NPOS23_tree);
			DebugLocation(24, 13);
			INT24=(IToken)Match(input,INT,Follow._INT_in_npos155); 
			INT24_tree = (CommonTree)adaptor.Create(INT24);
			adaptor.AddChild(root_0, INT24_tree);
			DebugLocation(24, 17);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:17: ( ( ',' )? ( '-' )? INT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==INT||(LA5_0>=32 && LA5_0<=33)))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:18: ( ',' )? ( '-' )? INT
					{
					DebugLocation(24, 18);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:18: ( ',' )?
					int alt3=2;
					try { DebugEnterSubRule(3);
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if ((LA3_0==32))
					{
						alt3 = 1;
					}
					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:18: ','
						{
						DebugLocation(24, 18);
						char_literal25=(IToken)Match(input,32,Follow._32_in_npos158); 
						char_literal25_tree = (CommonTree)adaptor.Create(char_literal25);
						adaptor.AddChild(root_0, char_literal25_tree);

						}
						break;

					}
					} finally { DebugExitSubRule(3); }

					DebugLocation(24, 23);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:23: ( '-' )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==33))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:24:23: '-'
						{
						DebugLocation(24, 23);
						char_literal26=(IToken)Match(input,33,Follow._33_in_npos161); 
						char_literal26_tree = (CommonTree)adaptor.Create(char_literal26);
						adaptor.AddChild(root_0, char_literal26_tree);

						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(24, 28);
					INT27=(IToken)Match(input,INT,Follow._INT_in_npos164); 
					INT27_tree = (CommonTree)adaptor.Create(INT27);
					adaptor.AddChild(root_0, INT27_tree);

					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("npos", 6);
			LeaveRule("npos", 6);
			LeaveRule_npos();
		}
		DebugLocation(24, 32);
		} finally { DebugExitRule(GrammarFileName, "npos"); }
		return retval;

	}
	// $ANTLR end "npos"

	partial void EnterRule_user();
	partial void LeaveRule_user();

	// $ANTLR start "user"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:1: user : USER INT ;
	[GrammarRule("user")]
	private AstParserRuleReturnScope<CommonTree, IToken> user()
	{
		EnterRule_user();
		EnterRule("user", 7);
		TraceIn("user", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken USER28 = default(IToken);
		IToken INT29 = default(IToken);

		CommonTree USER28_tree = default(CommonTree);
		CommonTree INT29_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "user");
		DebugLocation(25, 15);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:6: ( USER INT )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:25:8: USER INT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(25, 8);
			USER28=(IToken)Match(input,USER,Follow._USER_in_user173); 
			USER28_tree = (CommonTree)adaptor.Create(USER28);
			adaptor.AddChild(root_0, USER28_tree);
			DebugLocation(25, 13);
			INT29=(IToken)Match(input,INT,Follow._INT_in_user175); 
			INT29_tree = (CommonTree)adaptor.Create(INT29);
			adaptor.AddChild(root_0, INT29_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("user", 7);
			LeaveRule("user", 7);
			LeaveRule_user();
		}
		DebugLocation(25, 15);
		} finally { DebugExitRule(GrammarFileName, "user"); }
		return retval;

	}
	// $ANTLR end "user"

	partial void EnterRule_tool();
	partial void LeaveRule_tool();

	// $ANTLR start "tool"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:26:1: tool : TOOL INT ;
	[GrammarRule("tool")]
	private AstParserRuleReturnScope<CommonTree, IToken> tool()
	{
		EnterRule_tool();
		EnterRule("tool", 8);
		TraceIn("tool", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken TOOL30 = default(IToken);
		IToken INT31 = default(IToken);

		CommonTree TOOL30_tree = default(CommonTree);
		CommonTree INT31_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "tool");
		DebugLocation(26, 15);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:26:6: ( TOOL INT )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:26:8: TOOL INT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(26, 8);
			TOOL30=(IToken)Match(input,TOOL,Follow._TOOL_in_tool182); 
			TOOL30_tree = (CommonTree)adaptor.Create(TOOL30);
			adaptor.AddChild(root_0, TOOL30_tree);
			DebugLocation(26, 13);
			INT31=(IToken)Match(input,INT,Follow._INT_in_tool184); 
			INT31_tree = (CommonTree)adaptor.Create(INT31);
			adaptor.AddChild(root_0, INT31_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tool", 8);
			LeaveRule("tool", 8);
			LeaveRule_tool();
		}
		DebugLocation(26, 15);
		} finally { DebugExitRule(GrammarFileName, "tool"); }
		return retval;

	}
	// $ANTLR end "tool"

	partial void EnterRule_postype();
	partial void LeaveRule_postype();

	// $ANTLR start "postype"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:1: postype : POSTYPE ( 'USER' | 'PULSE' ) ;
	[GrammarRule("postype")]
	private AstParserRuleReturnScope<CommonTree, IToken> postype()
	{
		EnterRule_postype();
		EnterRule("postype", 9);
		TraceIn("postype", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken POSTYPE32 = default(IToken);
		IToken set33 = default(IToken);

		CommonTree POSTYPE32_tree = default(CommonTree);
		CommonTree set33_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "postype");
		DebugLocation(27, 36);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:9: ( POSTYPE ( 'USER' | 'PULSE' ) )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:27:11: POSTYPE ( 'USER' | 'PULSE' )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(27, 11);
			POSTYPE32=(IToken)Match(input,POSTYPE,Follow._POSTYPE_in_postype191); 
			POSTYPE32_tree = (CommonTree)adaptor.Create(POSTYPE32);
			adaptor.AddChild(root_0, POSTYPE32_tree);
			DebugLocation(27, 19);

			set33=(IToken)input.LT(1);
			if ((input.LA(1)>=42 && input.LA(1)<=43))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set33));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postype", 9);
			LeaveRule("postype", 9);
			LeaveRule_postype();
		}
		DebugLocation(27, 36);
		} finally { DebugExitRule(GrammarFileName, "postype"); }
		return retval;

	}
	// $ANTLR end "postype"

	partial void EnterRule_rectan();
	partial void LeaveRule_rectan();

	// $ANTLR start "rectan"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:28:1: rectan : RECTAN ;
	[GrammarRule("rectan")]
	private AstParserRuleReturnScope<CommonTree, IToken> rectan()
	{
		EnterRule_rectan();
		EnterRule("rectan", 10);
		TraceIn("rectan", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken RECTAN34 = default(IToken);

		CommonTree RECTAN34_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "rectan");
		DebugLocation(28, 15);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:28:8: ( RECTAN )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:28:10: RECTAN
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(28, 10);
			RECTAN34=(IToken)Match(input,RECTAN,Follow._RECTAN_in_rectan206); 
			RECTAN34_tree = (CommonTree)adaptor.Create(RECTAN34);
			adaptor.AddChild(root_0, RECTAN34_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rectan", 10);
			LeaveRule("rectan", 10);
			LeaveRule_rectan();
		}
		DebugLocation(28, 15);
		} finally { DebugExitRule(GrammarFileName, "rectan"); }
		return retval;

	}
	// $ANTLR end "rectan"

	partial void EnterRule_rconf();
	partial void LeaveRule_rconf();

	// $ANTLR start "rconf"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:1: rconf : RCONF ( ( ',' )? ( '0' | '1' ) )+ ;
	[GrammarRule("rconf")]
	private AstParserRuleReturnScope<CommonTree, IToken> rconf()
	{
		EnterRule_rconf();
		EnterRule("rconf", 11);
		TraceIn("rconf", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken RCONF35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken set37 = default(IToken);

		CommonTree RCONF35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree set37_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "rconf");
		DebugLocation(29, 31);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:7: ( RCONF ( ( ',' )? ( '0' | '1' ) )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:9: RCONF ( ( ',' )? ( '0' | '1' ) )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(29, 9);
			RCONF35=(IToken)Match(input,RCONF,Follow._RCONF_in_rconf213); 
			RCONF35_tree = (CommonTree)adaptor.Create(RCONF35);
			adaptor.AddChild(root_0, RCONF35_tree);
			DebugLocation(29, 15);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:15: ( ( ',' )? ( '0' | '1' ) )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==32||(LA7_0>=35 && LA7_0<=36)))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:16: ( ',' )? ( '0' | '1' )
					{
					DebugLocation(29, 16);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:16: ( ',' )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==32))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:29:16: ','
						{
						DebugLocation(29, 16);
						char_literal36=(IToken)Match(input,32,Follow._32_in_rconf216); 
						char_literal36_tree = (CommonTree)adaptor.Create(char_literal36);
						adaptor.AddChild(root_0, char_literal36_tree);

						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(29, 21);

					set37=(IToken)input.LT(1);
					if ((input.LA(1)>=35 && input.LA(1)<=36))
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set37));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rconf", 11);
			LeaveRule("rconf", 11);
			LeaveRule_rconf();
		}
		DebugLocation(29, 31);
		} finally { DebugExitRule(GrammarFileName, "rconf"); }
		return retval;

	}
	// $ANTLR end "rconf"

	partial void EnterRule_cindeks();
	partial void LeaveRule_cindeks();

	// $ANTLR start "cindeks"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:1: cindeks : 'C' ( INT )+ '=' ( ( ',' )? ( '-' )? REAL )+ ;
	[GrammarRule("cindeks")]
	private AstParserRuleReturnScope<CommonTree, IToken> cindeks()
	{
		EnterRule_cindeks();
		EnterRule("cindeks", 12);
		TraceIn("cindeks", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal38 = default(IToken);
		IToken INT39 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken char_literal41 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken REAL43 = default(IToken);

		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree INT39_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree char_literal41_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree REAL43_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cindeks");
		DebugLocation(30, 40);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:9: ( 'C' ( INT )+ '=' ( ( ',' )? ( '-' )? REAL )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:11: 'C' ( INT )+ '=' ( ( ',' )? ( '-' )? REAL )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(30, 11);
			char_literal38=(IToken)Match(input,39,Follow._39_in_cindeks232); 
			char_literal38_tree = (CommonTree)adaptor.Create(char_literal38);
			adaptor.AddChild(root_0, char_literal38_tree);
			DebugLocation(30, 15);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:15: ( INT )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==INT))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:15: INT
					{
					DebugLocation(30, 15);
					INT39=(IToken)Match(input,INT,Follow._INT_in_cindeks234); 
					INT39_tree = (CommonTree)adaptor.Create(INT39);
					adaptor.AddChild(root_0, INT39_tree);

					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(30, 20);
			char_literal40=(IToken)Match(input,37,Follow._37_in_cindeks237); 
			char_literal40_tree = (CommonTree)adaptor.Create(char_literal40);
			adaptor.AddChild(root_0, char_literal40_tree);
			DebugLocation(30, 24);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:24: ( ( ',' )? ( '-' )? REAL )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==REAL||(LA11_0>=32 && LA11_0<=33)))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:25: ( ',' )? ( '-' )? REAL
					{
					DebugLocation(30, 25);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:25: ( ',' )?
					int alt9=2;
					try { DebugEnterSubRule(9);
					try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if ((LA9_0==32))
					{
						alt9 = 1;
					}
					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:25: ','
						{
						DebugLocation(30, 25);
						char_literal41=(IToken)Match(input,32,Follow._32_in_cindeks240); 
						char_literal41_tree = (CommonTree)adaptor.Create(char_literal41);
						adaptor.AddChild(root_0, char_literal41_tree);

						}
						break;

					}
					} finally { DebugExitSubRule(9); }

					DebugLocation(30, 30);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:30: ( '-' )?
					int alt10=2;
					try { DebugEnterSubRule(10);
					try { DebugEnterDecision(10, false);
					int LA10_0 = input.LA(1);

					if ((LA10_0==33))
					{
						alt10 = 1;
					}
					} finally { DebugExitDecision(10); }
					switch (alt10)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:30:30: '-'
						{
						DebugLocation(30, 30);
						char_literal42=(IToken)Match(input,33,Follow._33_in_cindeks243); 
						char_literal42_tree = (CommonTree)adaptor.Create(char_literal42);
						adaptor.AddChild(root_0, char_literal42_tree);

						}
						break;

					}
					} finally { DebugExitSubRule(10); }

					DebugLocation(30, 35);
					REAL43=(IToken)Match(input,REAL,Follow._REAL_in_cindeks246); 
					REAL43_tree = (CommonTree)adaptor.Create(REAL43);
					adaptor.AddChild(root_0, REAL43_tree);

					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cindeks", 12);
			LeaveRule("cindeks", 12);
			LeaveRule_cindeks();
		}
		DebugLocation(30, 40);
		} finally { DebugExitRule(GrammarFileName, "cindeks"); }
		return retval;

	}
	// $ANTLR end "cindeks"

	partial void EnterRule_inst();
	partial void LeaveRule_inst();

	// $ANTLR start "inst"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:31:1: inst : INST ;
	[GrammarRule("inst")]
	private AstParserRuleReturnScope<CommonTree, IToken> inst()
	{
		EnterRule_inst();
		EnterRule("inst", 13);
		TraceIn("inst", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INST44 = default(IToken);

		CommonTree INST44_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inst");
		DebugLocation(31, 11);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:31:6: ( INST )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:31:8: INST
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(31, 8);
			INST44=(IToken)Match(input,INST,Follow._INST_in_inst255); 
			INST44_tree = (CommonTree)adaptor.Create(INST44);
			adaptor.AddChild(root_0, INST44_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inst", 13);
			LeaveRule("inst", 13);
			LeaveRule_inst();
		}
		DebugLocation(31, 11);
		} finally { DebugExitRule(GrammarFileName, "inst"); }
		return retval;

	}
	// $ANTLR end "inst"

	partial void EnterRule_date();
	partial void LeaveRule_date();

	// $ANTLR start "date"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:1: date : DATE ( INT )+ '/' ! ( INT )+ '/' ! ( INT )+ TIME ;
	[GrammarRule("date")]
	private AstParserRuleReturnScope<CommonTree, IToken> date()
	{
		EnterRule_date();
		EnterRule("date", 14);
		TraceIn("date", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken DATE45 = default(IToken);
		IToken INT46 = default(IToken);
		IToken char_literal47 = default(IToken);
		IToken INT48 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken INT50 = default(IToken);
		IToken TIME51 = default(IToken);

		CommonTree DATE45_tree = default(CommonTree);
		CommonTree INT46_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree INT48_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree INT50_tree = default(CommonTree);
		CommonTree TIME51_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "date");
		DebugLocation(32, 41);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:6: ( DATE ( INT )+ '/' ! ( INT )+ '/' ! ( INT )+ TIME )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:8: DATE ( INT )+ '/' ! ( INT )+ '/' ! ( INT )+ TIME
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(32, 8);
			DATE45=(IToken)Match(input,DATE,Follow._DATE_in_date262); 
			DATE45_tree = (CommonTree)adaptor.Create(DATE45);
			adaptor.AddChild(root_0, DATE45_tree);
			DebugLocation(32, 13);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:13: ( INT )+
			int cnt12=0;
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==INT))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:13: INT
					{
					DebugLocation(32, 13);
					INT46=(IToken)Match(input,INT,Follow._INT_in_date264); 
					INT46_tree = (CommonTree)adaptor.Create(INT46);
					adaptor.AddChild(root_0, INT46_tree);

					}
					break;

				default:
					if (cnt12 >= 1)
						goto loop12;

					EarlyExitException eee12 = new EarlyExitException( 12, input );
					DebugRecognitionException(eee12);
					throw eee12;
				}
				cnt12++;
			}
			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(32, 21);
			char_literal47=(IToken)Match(input,34,Follow._34_in_date267); 
			DebugLocation(32, 23);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:23: ( INT )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==INT))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:23: INT
					{
					DebugLocation(32, 23);
					INT48=(IToken)Match(input,INT,Follow._INT_in_date270); 
					INT48_tree = (CommonTree)adaptor.Create(INT48);
					adaptor.AddChild(root_0, INT48_tree);

					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(32, 31);
			char_literal49=(IToken)Match(input,34,Follow._34_in_date273); 
			DebugLocation(32, 33);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:33: ( INT )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==INT))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:32:33: INT
					{
					DebugLocation(32, 33);
					INT50=(IToken)Match(input,INT,Follow._INT_in_date276); 
					INT50_tree = (CommonTree)adaptor.Create(INT50);
					adaptor.AddChild(root_0, INT50_tree);

					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(32, 38);
			TIME51=(IToken)Match(input,TIME,Follow._TIME_in_date279); 
			TIME51_tree = (CommonTree)adaptor.Create(TIME51);
			adaptor.AddChild(root_0, TIME51_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("date", 14);
			LeaveRule("date", 14);
			LeaveRule_date();
		}
		DebugLocation(32, 41);
		} finally { DebugExitRule(GrammarFileName, "date"); }
		return retval;

	}
	// $ANTLR end "date"

	partial void EnterRule_comm();
	partial void LeaveRule_comm();

	// $ANTLR start "comm"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:33:1: comm : COMM ( INT | 'A' .. 'Z' )+ ;
	[GrammarRule("comm")]
	private AstParserRuleReturnScope<CommonTree, IToken> comm()
	{
		EnterRule_comm();
		EnterRule("comm", 15);
		TraceIn("comm", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken COMM52 = default(IToken);
		IToken set53 = default(IToken);

		CommonTree COMM52_tree = default(CommonTree);
		CommonTree set53_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "comm");
		DebugLocation(33, 27);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:33:6: ( COMM ( INT | 'A' .. 'Z' )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:33:8: COMM ( INT | 'A' .. 'Z' )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(33, 8);
			COMM52=(IToken)Match(input,COMM,Follow._COMM_in_comm286); 
			COMM52_tree = (CommonTree)adaptor.Create(COMM52);
			adaptor.AddChild(root_0, COMM52_tree);
			DebugLocation(33, 13);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:33:13: ( INT | 'A' .. 'Z' )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==INT))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:
					{
					DebugLocation(33, 13);

					set53=(IToken)input.LT(1);
					if (input.LA(1)==INT)
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set53));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comm", 15);
			LeaveRule("comm", 15);
			LeaveRule_comm();
		}
		DebugLocation(33, 27);
		} finally { DebugExitRule(GrammarFileName, "comm"); }
		return retval;

	}
	// $ANTLR end "comm"

	partial void EnterRule_attr();
	partial void LeaveRule_attr();

	// $ANTLR start "attr"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:1: attr : ATTR ( ( ',' )? NIZ )+ ;
	[GrammarRule("attr")]
	private AstParserRuleReturnScope<CommonTree, IToken> attr()
	{
		EnterRule_attr();
		EnterRule("attr", 16);
		TraceIn("attr", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ATTR54 = default(IToken);
		IToken char_literal55 = default(IToken);
		IToken NIZ56 = default(IToken);

		CommonTree ATTR54_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree NIZ56_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attr");
		DebugLocation(34, 23);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:6: ( ATTR ( ( ',' )? NIZ )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:8: ATTR ( ( ',' )? NIZ )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(34, 8);
			ATTR54=(IToken)Match(input,ATTR,Follow._ATTR_in_attr302); 
			ATTR54_tree = (CommonTree)adaptor.Create(ATTR54);
			adaptor.AddChild(root_0, ATTR54_tree);
			DebugLocation(34, 13);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:13: ( ( ',' )? NIZ )+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==NIZ||LA17_0==32))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:14: ( ',' )? NIZ
					{
					DebugLocation(34, 14);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:14: ( ',' )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==32))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:34:14: ','
						{
						DebugLocation(34, 14);
						char_literal55=(IToken)Match(input,32,Follow._32_in_attr305); 
						char_literal55_tree = (CommonTree)adaptor.Create(char_literal55);
						adaptor.AddChild(root_0, char_literal55_tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(34, 19);
					NIZ56=(IToken)Match(input,NIZ,Follow._NIZ_in_attr308); 
					NIZ56_tree = (CommonTree)adaptor.Create(NIZ56);
					adaptor.AddChild(root_0, NIZ56_tree);

					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attr", 16);
			LeaveRule("attr", 16);
			LeaveRule_attr();
		}
		DebugLocation(34, 23);
		} finally { DebugExitRule(GrammarFileName, "attr"); }
		return retval;

	}
	// $ANTLR end "attr"

	partial void EnterRule_frame();
	partial void LeaveRule_frame();

	// $ANTLR start "frame"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:1: frame : FRAME 'USER' INT ;
	[GrammarRule("frame")]
	private AstParserRuleReturnScope<CommonTree, IToken> frame()
	{
		EnterRule_frame();
		EnterRule("frame", 17);
		TraceIn("frame", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken FRAME57 = default(IToken);
		IToken string_literal58 = default(IToken);
		IToken INT59 = default(IToken);

		CommonTree FRAME57_tree = default(CommonTree);
		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree INT59_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "frame");
		DebugLocation(35, 24);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:7: ( FRAME 'USER' INT )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:35:9: FRAME 'USER' INT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(35, 9);
			FRAME57=(IToken)Match(input,FRAME,Follow._FRAME_in_frame317); 
			FRAME57_tree = (CommonTree)adaptor.Create(FRAME57);
			adaptor.AddChild(root_0, FRAME57_tree);
			DebugLocation(35, 15);
			string_literal58=(IToken)Match(input,43,Follow._43_in_frame319); 
			string_literal58_tree = (CommonTree)adaptor.Create(string_literal58);
			adaptor.AddChild(root_0, string_literal58_tree);
			DebugLocation(35, 22);
			INT59=(IToken)Match(input,INT,Follow._INT_in_frame321); 
			INT59_tree = (CommonTree)adaptor.Create(INT59);
			adaptor.AddChild(root_0, INT59_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("frame", 17);
			LeaveRule("frame", 17);
			LeaveRule_frame();
		}
		DebugLocation(35, 24);
		} finally { DebugExitRule(GrammarFileName, "frame"); }
		return retval;

	}
	// $ANTLR end "frame"

	partial void EnterRule_group();
	partial void LeaveRule_group();

	// $ANTLR start "group"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:36:1: group : GROUP ( 'A' .. 'Z' | INT )+ ;
	[GrammarRule("group")]
	private AstParserRuleReturnScope<CommonTree, IToken> group()
	{
		EnterRule_group();
		EnterRule("group", 18);
		TraceIn("group", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken GROUP60 = default(IToken);
		IToken set61 = default(IToken);

		CommonTree GROUP60_tree = default(CommonTree);
		CommonTree set61_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "group");
		DebugLocation(36, 29);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:36:7: ( GROUP ( 'A' .. 'Z' | INT )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:36:9: GROUP ( 'A' .. 'Z' | INT )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(36, 9);
			GROUP60=(IToken)Match(input,GROUP,Follow._GROUP_in_group328); 
			GROUP60_tree = (CommonTree)adaptor.Create(GROUP60);
			adaptor.AddChild(root_0, GROUP60_tree);
			DebugLocation(36, 15);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:36:15: ( 'A' .. 'Z' | INT )+
			int cnt18=0;
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==INT))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:
					{
					DebugLocation(36, 15);

					set61=(IToken)input.LT(1);
					if (input.LA(1)==INT)
					{
						input.Consume();
						adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set61));
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt18 >= 1)
						goto loop18;

					EarlyExitException eee18 = new EarlyExitException( 18, input );
					DebugRecognitionException(eee18);
					throw eee18;
				}
				cnt18++;
			}
			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("group", 18);
			LeaveRule("group", 18);
			LeaveRule_group();
		}
		DebugLocation(36, 29);
		} finally { DebugExitRule(GrammarFileName, "group"); }
		return retval;

	}
	// $ANTLR end "group"

	partial void EnterRule_main();
	partial void LeaveRule_main();

	// $ANTLR start "main"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:37:1: main : 'NOP' ukazi 'END' ;
	[GrammarRule("main")]
	private AstParserRuleReturnScope<CommonTree, IToken> main()
	{
		EnterRule_main();
		EnterRule("main", 19);
		TraceIn("main", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal62 = default(IToken);
		IToken string_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ukazi63 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal62_tree = default(CommonTree);
		CommonTree string_literal64_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "main");
		DebugLocation(37, 24);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:37:6: ( 'NOP' ukazi 'END' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:37:8: 'NOP' ukazi 'END'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(37, 8);
			string_literal62=(IToken)Match(input,41,Follow._41_in_main344); 
			string_literal62_tree = (CommonTree)adaptor.Create(string_literal62);
			adaptor.AddChild(root_0, string_literal62_tree);
			DebugLocation(37, 14);
			PushFollow(Follow._ukazi_in_main346);
			ukazi63=ukazi();
			PopFollow();

			adaptor.AddChild(root_0, ukazi63.Tree);
			DebugLocation(37, 20);
			string_literal64=(IToken)Match(input,40,Follow._40_in_main348); 
			string_literal64_tree = (CommonTree)adaptor.Create(string_literal64);
			adaptor.AddChild(root_0, string_literal64_tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("main", 19);
			LeaveRule("main", 19);
			LeaveRule_main();
		}
		DebugLocation(37, 24);
		} finally { DebugExitRule(GrammarFileName, "main"); }
		return retval;

	}
	// $ANTLR end "main"

	partial void EnterRule_ukazi();
	partial void LeaveRule_ukazi();

	// $ANTLR start "ukazi"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:38:1: ukazi : premik DOUT TIMER premiki DOUT premik ;
	[GrammarRule("ukazi")]
	private AstParserRuleReturnScope<CommonTree, IToken> ukazi()
	{
		EnterRule_ukazi();
		EnterRule("ukazi", 20);
		TraceIn("ukazi", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken DOUT66 = default(IToken);
		IToken TIMER67 = default(IToken);
		IToken DOUT69 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> premik65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> premiki68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> premik70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree DOUT66_tree = default(CommonTree);
		CommonTree TIMER67_tree = default(CommonTree);
		CommonTree DOUT69_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ukazi");
		DebugLocation(38, 45);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:38:7: ( premik DOUT TIMER premiki DOUT premik )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:38:9: premik DOUT TIMER premiki DOUT premik
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(38, 9);
			PushFollow(Follow._premik_in_ukazi355);
			premik65=premik();
			PopFollow();

			adaptor.AddChild(root_0, premik65.Tree);
			DebugLocation(38, 16);
			DOUT66=(IToken)Match(input,DOUT,Follow._DOUT_in_ukazi357); 
			DOUT66_tree = (CommonTree)adaptor.Create(DOUT66);
			adaptor.AddChild(root_0, DOUT66_tree);
			DebugLocation(38, 21);
			TIMER67=(IToken)Match(input,TIMER,Follow._TIMER_in_ukazi359); 
			TIMER67_tree = (CommonTree)adaptor.Create(TIMER67);
			adaptor.AddChild(root_0, TIMER67_tree);
			DebugLocation(38, 27);
			PushFollow(Follow._premiki_in_ukazi361);
			premiki68=premiki();
			PopFollow();

			adaptor.AddChild(root_0, premiki68.Tree);
			DebugLocation(38, 35);
			DOUT69=(IToken)Match(input,DOUT,Follow._DOUT_in_ukazi363); 
			DOUT69_tree = (CommonTree)adaptor.Create(DOUT69);
			adaptor.AddChild(root_0, DOUT69_tree);
			DebugLocation(38, 40);
			PushFollow(Follow._premik_in_ukazi365);
			premik70=premik();
			PopFollow();

			adaptor.AddChild(root_0, premik70.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ukazi", 20);
			LeaveRule("ukazi", 20);
			LeaveRule_ukazi();
		}
		DebugLocation(38, 45);
		} finally { DebugExitRule(GrammarFileName, "ukazi"); }
		return retval;

	}
	// $ANTLR end "ukazi"

	partial void EnterRule_premiki();
	partial void LeaveRule_premiki();

	// $ANTLR start "premiki"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:39:1: premiki : ( premik premiki | premik );
	[GrammarRule("premiki")]
	private AstParserRuleReturnScope<CommonTree, IToken> premiki()
	{
		EnterRule_premiki();
		EnterRule("premiki", 21);
		TraceIn("premiki", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> premik71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> premiki72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> premik73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "premiki");
		DebugLocation(39, 33);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:39:9: ( premik premiki | premik )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			try
			{
				alt19 = dfa19.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:39:11: premik premiki
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(39, 11);
				PushFollow(Follow._premik_in_premiki372);
				premik71=premik();
				PopFollow();

				adaptor.AddChild(root_0, premik71.Tree);
				DebugLocation(39, 18);
				PushFollow(Follow._premiki_in_premiki374);
				premiki72=premiki();
				PopFollow();

				adaptor.AddChild(root_0, premiki72.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:39:28: premik
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(39, 28);
				PushFollow(Follow._premik_in_premiki378);
				premik73=premik();
				PopFollow();

				adaptor.AddChild(root_0, premik73.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("premiki", 21);
			LeaveRule("premiki", 21);
			LeaveRule_premiki();
		}
		DebugLocation(39, 33);
		} finally { DebugExitRule(GrammarFileName, "premiki"); }
		return retval;

	}
	// $ANTLR end "premiki"

	partial void EnterRule_premik();
	partial void LeaveRule_premik();

	// $ANTLR start "premik"
	// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:1: premik : ( ( MOVJ 'C' ( INT )+ 'VJ' '=' ! REAL ) | ( MOVL 'C' ( INT )+ 'V' '=' ! REAL ) | ( MOVC 'C' ( INT )+ 'V' '=' ! REAL ) | ( MOVS 'C' ( INT )+ 'V' '=' ! REAL ) );
	[GrammarRule("premik")]
	private AstParserRuleReturnScope<CommonTree, IToken> premik()
	{
		EnterRule_premik();
		EnterRule("premik", 22);
		TraceIn("premik", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken MOVJ74 = default(IToken);
		IToken char_literal75 = default(IToken);
		IToken INT76 = default(IToken);
		IToken string_literal77 = default(IToken);
		IToken char_literal78 = default(IToken);
		IToken REAL79 = default(IToken);
		IToken MOVL80 = default(IToken);
		IToken char_literal81 = default(IToken);
		IToken INT82 = default(IToken);
		IToken char_literal83 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken REAL85 = default(IToken);
		IToken MOVC86 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken INT88 = default(IToken);
		IToken char_literal89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken REAL91 = default(IToken);
		IToken MOVS92 = default(IToken);
		IToken char_literal93 = default(IToken);
		IToken INT94 = default(IToken);
		IToken char_literal95 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken REAL97 = default(IToken);

		CommonTree MOVJ74_tree = default(CommonTree);
		CommonTree char_literal75_tree = default(CommonTree);
		CommonTree INT76_tree = default(CommonTree);
		CommonTree string_literal77_tree = default(CommonTree);
		CommonTree char_literal78_tree = default(CommonTree);
		CommonTree REAL79_tree = default(CommonTree);
		CommonTree MOVL80_tree = default(CommonTree);
		CommonTree char_literal81_tree = default(CommonTree);
		CommonTree INT82_tree = default(CommonTree);
		CommonTree char_literal83_tree = default(CommonTree);
		CommonTree char_literal84_tree = default(CommonTree);
		CommonTree REAL85_tree = default(CommonTree);
		CommonTree MOVC86_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree INT88_tree = default(CommonTree);
		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree REAL91_tree = default(CommonTree);
		CommonTree MOVS92_tree = default(CommonTree);
		CommonTree char_literal93_tree = default(CommonTree);
		CommonTree INT94_tree = default(CommonTree);
		CommonTree char_literal95_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree REAL97_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "premik");
		DebugLocation(40, 135);
		try
		{
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:8: ( ( MOVJ 'C' ( INT )+ 'VJ' '=' ! REAL ) | ( MOVL 'C' ( INT )+ 'V' '=' ! REAL ) | ( MOVC 'C' ( INT )+ 'V' '=' ! REAL ) | ( MOVS 'C' ( INT )+ 'V' '=' ! REAL ) )
			int alt24=4;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case MOVJ:
				{
				alt24 = 1;
				}
				break;
			case MOVL:
				{
				alt24 = 2;
				}
				break;
			case MOVC:
				{
				alt24 = 3;
				}
				break;
			case MOVS:
				{
				alt24 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:10: ( MOVJ 'C' ( INT )+ 'VJ' '=' ! REAL )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(40, 10);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:10: ( MOVJ 'C' ( INT )+ 'VJ' '=' ! REAL )
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:11: MOVJ 'C' ( INT )+ 'VJ' '=' ! REAL
				{
				DebugLocation(40, 11);
				MOVJ74=(IToken)Match(input,MOVJ,Follow._MOVJ_in_premik386); 
				MOVJ74_tree = (CommonTree)adaptor.Create(MOVJ74);
				adaptor.AddChild(root_0, MOVJ74_tree);
				DebugLocation(40, 16);
				char_literal75=(IToken)Match(input,39,Follow._39_in_premik388); 
				char_literal75_tree = (CommonTree)adaptor.Create(char_literal75);
				adaptor.AddChild(root_0, char_literal75_tree);
				DebugLocation(40, 20);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:20: ( INT )+
				int cnt20=0;
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if ((LA20_0==INT))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:20: INT
						{
						DebugLocation(40, 20);
						INT76=(IToken)Match(input,INT,Follow._INT_in_premik390); 
						INT76_tree = (CommonTree)adaptor.Create(INT76);
						adaptor.AddChild(root_0, INT76_tree);

						}
						break;

					default:
						if (cnt20 >= 1)
							goto loop20;

						EarlyExitException eee20 = new EarlyExitException( 20, input );
						DebugRecognitionException(eee20);
						throw eee20;
					}
					cnt20++;
				}
				loop20:
					;

				} finally { DebugExitSubRule(20); }

				DebugLocation(40, 25);
				string_literal77=(IToken)Match(input,45,Follow._45_in_premik393); 
				string_literal77_tree = (CommonTree)adaptor.Create(string_literal77);
				adaptor.AddChild(root_0, string_literal77_tree);
				DebugLocation(40, 33);
				char_literal78=(IToken)Match(input,37,Follow._37_in_premik395); 
				DebugLocation(40, 35);
				REAL79=(IToken)Match(input,REAL,Follow._REAL_in_premik398); 
				REAL79_tree = (CommonTree)adaptor.Create(REAL79);
				adaptor.AddChild(root_0, REAL79_tree);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:43: ( MOVL 'C' ( INT )+ 'V' '=' ! REAL )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(40, 43);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:43: ( MOVL 'C' ( INT )+ 'V' '=' ! REAL )
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:44: MOVL 'C' ( INT )+ 'V' '=' ! REAL
				{
				DebugLocation(40, 44);
				MOVL80=(IToken)Match(input,MOVL,Follow._MOVL_in_premik404); 
				MOVL80_tree = (CommonTree)adaptor.Create(MOVL80);
				adaptor.AddChild(root_0, MOVL80_tree);
				DebugLocation(40, 49);
				char_literal81=(IToken)Match(input,39,Follow._39_in_premik406); 
				char_literal81_tree = (CommonTree)adaptor.Create(char_literal81);
				adaptor.AddChild(root_0, char_literal81_tree);
				DebugLocation(40, 53);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:53: ( INT )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==INT))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:53: INT
						{
						DebugLocation(40, 53);
						INT82=(IToken)Match(input,INT,Follow._INT_in_premik408); 
						INT82_tree = (CommonTree)adaptor.Create(INT82);
						adaptor.AddChild(root_0, INT82_tree);

						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(40, 58);
				char_literal83=(IToken)Match(input,44,Follow._44_in_premik411); 
				char_literal83_tree = (CommonTree)adaptor.Create(char_literal83);
				adaptor.AddChild(root_0, char_literal83_tree);
				DebugLocation(40, 65);
				char_literal84=(IToken)Match(input,37,Follow._37_in_premik413); 
				DebugLocation(40, 67);
				REAL85=(IToken)Match(input,REAL,Follow._REAL_in_premik416); 
				REAL85_tree = (CommonTree)adaptor.Create(REAL85);
				adaptor.AddChild(root_0, REAL85_tree);

				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:75: ( MOVC 'C' ( INT )+ 'V' '=' ! REAL )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(40, 75);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:75: ( MOVC 'C' ( INT )+ 'V' '=' ! REAL )
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:76: MOVC 'C' ( INT )+ 'V' '=' ! REAL
				{
				DebugLocation(40, 76);
				MOVC86=(IToken)Match(input,MOVC,Follow._MOVC_in_premik422); 
				MOVC86_tree = (CommonTree)adaptor.Create(MOVC86);
				adaptor.AddChild(root_0, MOVC86_tree);
				DebugLocation(40, 81);
				char_literal87=(IToken)Match(input,39,Follow._39_in_premik424); 
				char_literal87_tree = (CommonTree)adaptor.Create(char_literal87);
				adaptor.AddChild(root_0, char_literal87_tree);
				DebugLocation(40, 85);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:85: ( INT )+
				int cnt22=0;
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==INT))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:85: INT
						{
						DebugLocation(40, 85);
						INT88=(IToken)Match(input,INT,Follow._INT_in_premik426); 
						INT88_tree = (CommonTree)adaptor.Create(INT88);
						adaptor.AddChild(root_0, INT88_tree);

						}
						break;

					default:
						if (cnt22 >= 1)
							goto loop22;

						EarlyExitException eee22 = new EarlyExitException( 22, input );
						DebugRecognitionException(eee22);
						throw eee22;
					}
					cnt22++;
				}
				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(40, 90);
				char_literal89=(IToken)Match(input,44,Follow._44_in_premik429); 
				char_literal89_tree = (CommonTree)adaptor.Create(char_literal89);
				adaptor.AddChild(root_0, char_literal89_tree);
				DebugLocation(40, 97);
				char_literal90=(IToken)Match(input,37,Follow._37_in_premik431); 
				DebugLocation(40, 99);
				REAL91=(IToken)Match(input,REAL,Follow._REAL_in_premik434); 
				REAL91_tree = (CommonTree)adaptor.Create(REAL91);
				adaptor.AddChild(root_0, REAL91_tree);

				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:107: ( MOVS 'C' ( INT )+ 'V' '=' ! REAL )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(40, 107);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:107: ( MOVS 'C' ( INT )+ 'V' '=' ! REAL )
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:108: MOVS 'C' ( INT )+ 'V' '=' ! REAL
				{
				DebugLocation(40, 108);
				MOVS92=(IToken)Match(input,MOVS,Follow._MOVS_in_premik440); 
				MOVS92_tree = (CommonTree)adaptor.Create(MOVS92);
				adaptor.AddChild(root_0, MOVS92_tree);
				DebugLocation(40, 113);
				char_literal93=(IToken)Match(input,39,Follow._39_in_premik442); 
				char_literal93_tree = (CommonTree)adaptor.Create(char_literal93);
				adaptor.AddChild(root_0, char_literal93_tree);
				DebugLocation(40, 117);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:117: ( INT )+
				int cnt23=0;
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==INT))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch (alt23)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:117: INT
						{
						DebugLocation(40, 117);
						INT94=(IToken)Match(input,INT,Follow._INT_in_premik444); 
						INT94_tree = (CommonTree)adaptor.Create(INT94);
						adaptor.AddChild(root_0, INT94_tree);

						}
						break;

					default:
						if (cnt23 >= 1)
							goto loop23;

						EarlyExitException eee23 = new EarlyExitException( 23, input );
						DebugRecognitionException(eee23);
						throw eee23;
					}
					cnt23++;
				}
				loop23:
					;

				} finally { DebugExitSubRule(23); }

				DebugLocation(40, 122);
				char_literal95=(IToken)Match(input,44,Follow._44_in_premik447); 
				char_literal95_tree = (CommonTree)adaptor.Create(char_literal95);
				adaptor.AddChild(root_0, char_literal95_tree);
				DebugLocation(40, 129);
				char_literal96=(IToken)Match(input,37,Follow._37_in_premik449); 
				DebugLocation(40, 131);
				REAL97=(IToken)Match(input,REAL,Follow._REAL_in_premik452); 
				REAL97_tree = (CommonTree)adaptor.Create(REAL97);
				adaptor.AddChild(root_0, REAL97_tree);

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("premik", 22);
			LeaveRule("premik", 22);
			LeaveRule_premik();
		}
		DebugLocation(40, 135);
		} finally { DebugExitRule(GrammarFileName, "premik"); }
		return retval;

	}
	// $ANTLR end "premik"
	#endregion Rules


	#region DFA
	private DFA19 dfa19;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa19 = new DFA19( this );
	}

	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x1B\xFFFF";
		private const string DFA19_eofS =
			"\x1B\xFFFF";
		private const string DFA19_minS =
			"\x1\xE\x4\x27\x8\xC\x4\x25\x4\x19\x4\x8\x2\xFFFF";
		private const string DFA19_maxS =
			"\x1\x11\x4\x27\x4\xC\x1\x2D\x3\x2C\x4\x25\x4\x19\x4\x11\x2\xFFFF";
		private const string DFA19_acceptS =
			"\x19\xFFFF\x1\x1\x1\x2";
		private const string DFA19_specialS =
			"\x1B\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x1\x3\x1\x1\x1\x2\x1\x4",
				"\x1\x5",
				"\x1\x6",
				"\x1\x7",
				"\x1\x8",
				"\x1\x9",
				"\x1\xA",
				"\x1\xB",
				"\x1\xC",
				"\x1\x9\x20\xFFFF\x1\xD",
				"\x1\xA\x1F\xFFFF\x1\xE",
				"\x1\xB\x1F\xFFFF\x1\xF",
				"\x1\xC\x1F\xFFFF\x1\x10",
				"\x1\x11",
				"\x1\x12",
				"\x1\x13",
				"\x1\x14",
				"\x1\x15",
				"\x1\x16",
				"\x1\x17",
				"\x1\x18",
				"\x1\x1A\x5\xFFFF\x4\x19",
				"\x1\x1A\x5\xFFFF\x4\x19",
				"\x1\x1A\x5\xFFFF\x4\x19",
				"\x1\x1A\x5\xFFFF\x4\x19",
				"",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "39:1: premiki : ( premik premiki | premik );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _prog_in_start37 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _job_in_prog49 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _name_in_prog51 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _pos_in_prog53 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _npos_in_prog55 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _user_in_prog57 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _tool_in_prog59 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _postype_in_prog61 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _rectan_in_prog63 = new BitSet(new ulong[]{0x8001000000UL});
		public static readonly BitSet _rconf_in_prog66 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _cindeks_in_prog69 = new BitSet(new ulong[]{0x8001000800UL});
		public static readonly BitSet _inst_in_prog73 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _date_in_prog75 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _comm_in_prog77 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _attr_in_prog79 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _frame_in_prog81 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _group_in_prog83 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _main_in_prog85 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JOB_in_job130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_name137 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _NIZ_in_name139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POS_in_pos146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NPOS_in_npos153 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_npos155 = new BitSet(new ulong[]{0x300001000UL});
		public static readonly BitSet _32_in_npos158 = new BitSet(new ulong[]{0x200001000UL});
		public static readonly BitSet _33_in_npos161 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_npos164 = new BitSet(new ulong[]{0x300001002UL});
		public static readonly BitSet _USER_in_user173 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_user175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOOL_in_tool182 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_tool184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _POSTYPE_in_postype191 = new BitSet(new ulong[]{0xC0000000000UL});
		public static readonly BitSet _set_in_postype193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RECTAN_in_rectan206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RCONF_in_rconf213 = new BitSet(new ulong[]{0x1900000000UL});
		public static readonly BitSet _32_in_rconf216 = new BitSet(new ulong[]{0x1800000000UL});
		public static readonly BitSet _set_in_rconf219 = new BitSet(new ulong[]{0x1900000002UL});
		public static readonly BitSet _39_in_cindeks232 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_cindeks234 = new BitSet(new ulong[]{0x2000001000UL});
		public static readonly BitSet _37_in_cindeks237 = new BitSet(new ulong[]{0x302000000UL});
		public static readonly BitSet _32_in_cindeks240 = new BitSet(new ulong[]{0x202000000UL});
		public static readonly BitSet _33_in_cindeks243 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _REAL_in_cindeks246 = new BitSet(new ulong[]{0x302000002UL});
		public static readonly BitSet _INST_in_inst255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DATE_in_date262 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_date264 = new BitSet(new ulong[]{0x400001000UL});
		public static readonly BitSet _34_in_date267 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_date270 = new BitSet(new ulong[]{0x400001000UL});
		public static readonly BitSet _34_in_date273 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_date276 = new BitSet(new ulong[]{0x8001000UL});
		public static readonly BitSet _TIME_in_date279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMM_in_comm286 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _ATTR_in_attr302 = new BitSet(new ulong[]{0x100100000UL});
		public static readonly BitSet _32_in_attr305 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _NIZ_in_attr308 = new BitSet(new ulong[]{0x100100002UL});
		public static readonly BitSet _FRAME_in_frame317 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_frame319 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_frame321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_group328 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _41_in_main344 = new BitSet(new ulong[]{0x3C000UL});
		public static readonly BitSet _ukazi_in_main346 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_main348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _premik_in_ukazi355 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DOUT_in_ukazi357 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _TIMER_in_ukazi359 = new BitSet(new ulong[]{0x3C000UL});
		public static readonly BitSet _premiki_in_ukazi361 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DOUT_in_ukazi363 = new BitSet(new ulong[]{0x3C000UL});
		public static readonly BitSet _premik_in_ukazi365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _premik_in_premiki372 = new BitSet(new ulong[]{0x3C000UL});
		public static readonly BitSet _premiki_in_premiki374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _premik_in_premiki378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MOVJ_in_premik386 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_premik388 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_premik390 = new BitSet(new ulong[]{0x200000001000UL});
		public static readonly BitSet _45_in_premik393 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_premik395 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _REAL_in_premik398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MOVL_in_premik404 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_premik406 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_premik408 = new BitSet(new ulong[]{0x100000001000UL});
		public static readonly BitSet _44_in_premik411 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_premik413 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _REAL_in_premik416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MOVC_in_premik422 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_premik424 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_premik426 = new BitSet(new ulong[]{0x100000001000UL});
		public static readonly BitSet _44_in_premik429 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_premik431 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _REAL_in_premik434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MOVS_in_premik440 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _39_in_premik442 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _INT_in_premik444 = new BitSet(new ulong[]{0x100000001000UL});
		public static readonly BitSet _44_in_premik447 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_premik449 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _REAL_in_premik452 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
