//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g 2012-02-08 18:34:20

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class RobotLanguageLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int ATTR=4;
	public const int COMM=5;
	public const int DATE=6;
	public const int DIN=7;
	public const int DOUT=8;
	public const int FRAME=9;
	public const int GROUP=10;
	public const int INDEKS=11;
	public const int INST=12;
	public const int INT=13;
	public const int JOB=14;
	public const int MOVC=15;
	public const int MOVJ=16;
	public const int MOVL=17;
	public const int MOVS=18;
	public const int NAME=19;
	public const int NEWLINE=20;
	public const int NIZ=21;
	public const int NPOS=22;
	public const int POS=23;
	public const int POSTYPE=24;
	public const int RCONF=25;
	public const int REAL=26;
	public const int RECTAN=27;
	public const int TIME=28;
	public const int TIMER=29;
	public const int TOOL=30;
	public const int USER=31;
	public const int WS=32;

    // delegates
    // delegators

	public RobotLanguageLexer()
	{
		OnCreated();
	}

	public RobotLanguageLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public RobotLanguageLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 1);
		TraceIn("T__33", 1);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:7:7: ( ',' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:7:9: ','
			{
			DebugLocation(7, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 1);
			LeaveRule("T__33", 1);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 2);
		TraceIn("T__34", 2);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:8:7: ( '-' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:8:9: '-'
			{
			DebugLocation(8, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 2);
			LeaveRule("T__34", 2);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 3);
		TraceIn("T__35", 3);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:9:7: ( '/' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:9:9: '/'
			{
			DebugLocation(9, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 3);
			LeaveRule("T__35", 3);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 4);
		TraceIn("T__36", 4);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:10:7: ( '0' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:10:9: '0'
			{
			DebugLocation(10, 9);
			Match('0'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 4);
			LeaveRule("T__36", 4);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 5);
		TraceIn("T__37", 5);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:11:7: ( '1' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:11:9: '1'
			{
			DebugLocation(11, 9);
			Match('1'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 5);
			LeaveRule("T__37", 5);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 6);
		TraceIn("T__38", 6);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:12:7: ( '=' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:12:9: '='
			{
			DebugLocation(12, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 6);
			LeaveRule("T__38", 6);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 7);
		TraceIn("T__39", 7);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:13:7: ( 'A' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:13:9: 'A'
			{
			DebugLocation(13, 9);
			Match('A'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 7);
			LeaveRule("T__39", 7);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 8);
		TraceIn("T__40", 8);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:14:7: ( 'END' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:14:9: 'END'
			{
			DebugLocation(14, 9);
			Match("END"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 8);
			LeaveRule("T__40", 8);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 9);
		TraceIn("T__41", 9);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:15:7: ( 'NOP' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:15:9: 'NOP'
			{
			DebugLocation(15, 9);
			Match("NOP"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 9);
			LeaveRule("T__41", 9);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 10);
		TraceIn("T__42", 10);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:16:7: ( 'PULSE' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:16:9: 'PULSE'
			{
			DebugLocation(16, 9);
			Match("PULSE"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 10);
			LeaveRule("T__42", 10);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 11);
		TraceIn("T__43", 11);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:17:7: ( 'USER' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:17:9: 'USER'
			{
			DebugLocation(17, 9);
			Match("USER"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 11);
			LeaveRule("T__43", 11);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 12);
		TraceIn("T__44", 12);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:18:7: ( 'V' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:18:9: 'V'
			{
			DebugLocation(18, 9);
			Match('V'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 12);
			LeaveRule("T__44", 12);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 13);
		TraceIn("T__45", 13);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:7: ( 'VJ' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:19:9: 'VJ'
			{
			DebugLocation(19, 9);
			Match("VJ"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 13);
			LeaveRule("T__45", 13);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 14);
		TraceIn("T__46", 14);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:20:7: ( 'Z' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:20:9: 'Z'
			{
			DebugLocation(20, 9);
			Match('Z'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 14);
			LeaveRule("T__46", 14);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_JOB();
	partial void LeaveRule_JOB();

	// $ANTLR start "JOB"
	[GrammarRule("JOB")]
	private void mJOB()
	{
		EnterRule_JOB();
		EnterRule("JOB", 15);
		TraceIn("JOB", 15);
		try
		{
			int _type = JOB;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:36:5: ( '/JOB' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:36:7: '/JOB'
			{
			DebugLocation(36, 7);
			Match("/JOB"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("JOB", 15);
			LeaveRule("JOB", 15);
			LeaveRule_JOB();
		}
	}
	// $ANTLR end "JOB"

	partial void EnterRule_NAME();
	partial void LeaveRule_NAME();

	// $ANTLR start "NAME"
	[GrammarRule("NAME")]
	private void mNAME()
	{
		EnterRule_NAME();
		EnterRule("NAME", 16);
		TraceIn("NAME", 16);
		try
		{
			int _type = NAME;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:37:6: ( '//NAME' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:37:8: '//NAME'
			{
			DebugLocation(37, 8);
			Match("//NAME"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAME", 16);
			LeaveRule("NAME", 16);
			LeaveRule_NAME();
		}
	}
	// $ANTLR end "NAME"

	partial void EnterRule_POS();
	partial void LeaveRule_POS();

	// $ANTLR start "POS"
	[GrammarRule("POS")]
	private void mPOS()
	{
		EnterRule_POS();
		EnterRule("POS", 17);
		TraceIn("POS", 17);
		try
		{
			int _type = POS;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:38:5: ( '//POS' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:38:7: '//POS'
			{
			DebugLocation(38, 7);
			Match("//POS"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("POS", 17);
			LeaveRule("POS", 17);
			LeaveRule_POS();
		}
	}
	// $ANTLR end "POS"

	partial void EnterRule_NPOS();
	partial void LeaveRule_NPOS();

	// $ANTLR start "NPOS"
	[GrammarRule("NPOS")]
	private void mNPOS()
	{
		EnterRule_NPOS();
		EnterRule("NPOS", 18);
		TraceIn("NPOS", 18);
		try
		{
			int _type = NPOS;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:39:6: ( '///NPOS' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:39:8: '///NPOS'
			{
			DebugLocation(39, 8);
			Match("///NPOS"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NPOS", 18);
			LeaveRule("NPOS", 18);
			LeaveRule_NPOS();
		}
	}
	// $ANTLR end "NPOS"

	partial void EnterRule_USER();
	partial void LeaveRule_USER();

	// $ANTLR start "USER"
	[GrammarRule("USER")]
	private void mUSER()
	{
		EnterRule_USER();
		EnterRule("USER", 19);
		TraceIn("USER", 19);
		try
		{
			int _type = USER;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:6: ( '///USER' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:40:8: '///USER'
			{
			DebugLocation(40, 8);
			Match("///USER"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("USER", 19);
			LeaveRule("USER", 19);
			LeaveRule_USER();
		}
	}
	// $ANTLR end "USER"

	partial void EnterRule_TOOL();
	partial void LeaveRule_TOOL();

	// $ANTLR start "TOOL"
	[GrammarRule("TOOL")]
	private void mTOOL()
	{
		EnterRule_TOOL();
		EnterRule("TOOL", 20);
		TraceIn("TOOL", 20);
		try
		{
			int _type = TOOL;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:41:6: ( '///TOOL' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:41:8: '///TOOL'
			{
			DebugLocation(41, 8);
			Match("///TOOL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TOOL", 20);
			LeaveRule("TOOL", 20);
			LeaveRule_TOOL();
		}
	}
	// $ANTLR end "TOOL"

	partial void EnterRule_POSTYPE();
	partial void LeaveRule_POSTYPE();

	// $ANTLR start "POSTYPE"
	[GrammarRule("POSTYPE")]
	private void mPOSTYPE()
	{
		EnterRule_POSTYPE();
		EnterRule("POSTYPE", 21);
		TraceIn("POSTYPE", 21);
		try
		{
			int _type = POSTYPE;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:42:9: ( '///POSTYPE' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:42:11: '///POSTYPE'
			{
			DebugLocation(42, 11);
			Match("///POSTYPE"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("POSTYPE", 21);
			LeaveRule("POSTYPE", 21);
			LeaveRule_POSTYPE();
		}
	}
	// $ANTLR end "POSTYPE"

	partial void EnterRule_RECTAN();
	partial void LeaveRule_RECTAN();

	// $ANTLR start "RECTAN"
	[GrammarRule("RECTAN")]
	private void mRECTAN()
	{
		EnterRule_RECTAN();
		EnterRule("RECTAN", 22);
		TraceIn("RECTAN", 22);
		try
		{
			int _type = RECTAN;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:43:8: ( '///RECTAN' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:43:10: '///RECTAN'
			{
			DebugLocation(43, 10);
			Match("///RECTAN"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RECTAN", 22);
			LeaveRule("RECTAN", 22);
			LeaveRule_RECTAN();
		}
	}
	// $ANTLR end "RECTAN"

	partial void EnterRule_RCONF();
	partial void LeaveRule_RCONF();

	// $ANTLR start "RCONF"
	[GrammarRule("RCONF")]
	private void mRCONF()
	{
		EnterRule_RCONF();
		EnterRule("RCONF", 23);
		TraceIn("RCONF", 23);
		try
		{
			int _type = RCONF;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:44:7: ( '///RCONF' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:44:9: '///RCONF'
			{
			DebugLocation(44, 9);
			Match("///RCONF"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCONF", 23);
			LeaveRule("RCONF", 23);
			LeaveRule_RCONF();
		}
	}
	// $ANTLR end "RCONF"

	partial void EnterRule_INDEKS();
	partial void LeaveRule_INDEKS();

	// $ANTLR start "INDEKS"
	[GrammarRule("INDEKS")]
	private void mINDEKS()
	{
		EnterRule_INDEKS();
		EnterRule("INDEKS", 24);
		TraceIn("INDEKS", 24);
		try
		{
			int _type = INDEKS;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:45:8: ( 'C' ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:45:10: 'C' ( INT )+
			{
			DebugLocation(45, 10);
			Match('C'); 
			DebugLocation(45, 14);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:45:14: ( INT )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:45:14: INT
					{
					DebugLocation(45, 14);
					mINT(); 

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INDEKS", 24);
			LeaveRule("INDEKS", 24);
			LeaveRule_INDEKS();
		}
	}
	// $ANTLR end "INDEKS"

	partial void EnterRule_INST();
	partial void LeaveRule_INST();

	// $ANTLR start "INST"
	[GrammarRule("INST")]
	private void mINST()
	{
		EnterRule_INST();
		EnterRule("INST", 25);
		TraceIn("INST", 25);
		try
		{
			int _type = INST;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:46:6: ( '//INST' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:46:8: '//INST'
			{
			DebugLocation(46, 8);
			Match("//INST"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INST", 25);
			LeaveRule("INST", 25);
			LeaveRule_INST();
		}
	}
	// $ANTLR end "INST"

	partial void EnterRule_DATE();
	partial void LeaveRule_DATE();

	// $ANTLR start "DATE"
	[GrammarRule("DATE")]
	private void mDATE()
	{
		EnterRule_DATE();
		EnterRule("DATE", 26);
		TraceIn("DATE", 26);
		try
		{
			int _type = DATE;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:47:6: ( '///DATE' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:47:8: '///DATE'
			{
			DebugLocation(47, 8);
			Match("///DATE"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DATE", 26);
			LeaveRule("DATE", 26);
			LeaveRule_DATE();
		}
	}
	// $ANTLR end "DATE"

	partial void EnterRule_TIME();
	partial void LeaveRule_TIME();

	// $ANTLR start "TIME"
	[GrammarRule("TIME")]
	private void mTIME()
	{
		EnterRule_TIME();
		EnterRule("TIME", 27);
		TraceIn("TIME", 27);
		try
		{
			int _type = TIME;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:48:6: ( ( INT )+ ':' ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:48:8: ( INT )+ ':' ( INT )+
			{
			DebugLocation(48, 8);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:48:8: ( INT )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:48:8: INT
					{
					DebugLocation(48, 8);
					mINT(); 

					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(48, 13);
			Match(':'); 
			DebugLocation(48, 17);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:48:17: ( INT )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:48:17: INT
					{
					DebugLocation(48, 17);
					mINT(); 

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TIME", 27);
			LeaveRule("TIME", 27);
			LeaveRule_TIME();
		}
	}
	// $ANTLR end "TIME"

	partial void EnterRule_COMM();
	partial void LeaveRule_COMM();

	// $ANTLR start "COMM"
	[GrammarRule("COMM")]
	private void mCOMM()
	{
		EnterRule_COMM();
		EnterRule("COMM", 28);
		TraceIn("COMM", 28);
		try
		{
			int _type = COMM;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:49:6: ( '///COMM' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:49:8: '///COMM'
			{
			DebugLocation(49, 8);
			Match("///COMM"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMM", 28);
			LeaveRule("COMM", 28);
			LeaveRule_COMM();
		}
	}
	// $ANTLR end "COMM"

	partial void EnterRule_ATTR();
	partial void LeaveRule_ATTR();

	// $ANTLR start "ATTR"
	[GrammarRule("ATTR")]
	private void mATTR()
	{
		EnterRule_ATTR();
		EnterRule("ATTR", 29);
		TraceIn("ATTR", 29);
		try
		{
			int _type = ATTR;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:50:6: ( '///ATTR' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:50:8: '///ATTR'
			{
			DebugLocation(50, 8);
			Match("///ATTR"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ATTR", 29);
			LeaveRule("ATTR", 29);
			LeaveRule_ATTR();
		}
	}
	// $ANTLR end "ATTR"

	partial void EnterRule_FRAME();
	partial void LeaveRule_FRAME();

	// $ANTLR start "FRAME"
	[GrammarRule("FRAME")]
	private void mFRAME()
	{
		EnterRule_FRAME();
		EnterRule("FRAME", 30);
		TraceIn("FRAME", 30);
		try
		{
			int _type = FRAME;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:51:7: ( '////FRAME' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:51:9: '////FRAME'
			{
			DebugLocation(51, 9);
			Match("////FRAME"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FRAME", 30);
			LeaveRule("FRAME", 30);
			LeaveRule_FRAME();
		}
	}
	// $ANTLR end "FRAME"

	partial void EnterRule_GROUP();
	partial void LeaveRule_GROUP();

	// $ANTLR start "GROUP"
	[GrammarRule("GROUP")]
	private void mGROUP()
	{
		EnterRule_GROUP();
		EnterRule("GROUP", 31);
		TraceIn("GROUP", 31);
		try
		{
			int _type = GROUP;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:52:7: ( '///GROUP1' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:52:9: '///GROUP1'
			{
			DebugLocation(52, 9);
			Match("///GROUP1"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GROUP", 31);
			LeaveRule("GROUP", 31);
			LeaveRule_GROUP();
		}
	}
	// $ANTLR end "GROUP"

	partial void EnterRule_DOUT();
	partial void LeaveRule_DOUT();

	// $ANTLR start "DOUT"
	[GrammarRule("DOUT")]
	private void mDOUT()
	{
		EnterRule_DOUT();
		EnterRule("DOUT", 32);
		TraceIn("DOUT", 32);
		try
		{
			int _type = DOUT;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:53:6: ( 'DOUT OT#' '(' INT ')' ( ' ON' | ' OFF' ) )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:53:8: 'DOUT OT#' '(' INT ')' ( ' ON' | ' OFF' )
			{
			DebugLocation(53, 8);
			Match("DOUT OT#"); 

			DebugLocation(53, 19);
			Match('('); 
			DebugLocation(53, 23);
			mINT(); 
			DebugLocation(53, 27);
			Match(')'); 
			DebugLocation(53, 31);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:53:31: ( ' ON' | ' OFF' )
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==' '))
			{
				int LA4_1 = input.LA(2);

				if ((LA4_1=='O'))
				{
					int LA4_2 = input.LA(3);

					if ((LA4_2=='N'))
					{
						alt4 = 1;
					}
					else if ((LA4_2=='F'))
					{
						alt4 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 4, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:53:32: ' ON'
				{
				DebugLocation(53, 32);
				Match(" ON"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:53:40: ' OFF'
				{
				DebugLocation(53, 40);
				Match(" OFF"); 


				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUT", 32);
			LeaveRule("DOUT", 32);
			LeaveRule_DOUT();
		}
	}
	// $ANTLR end "DOUT"

	partial void EnterRule_DIN();
	partial void LeaveRule_DIN();

	// $ANTLR start "DIN"
	[GrammarRule("DIN")]
	private void mDIN()
	{
		EnterRule_DIN();
		EnterRule("DIN", 33);
		TraceIn("DIN", 33);
		try
		{
			int _type = DIN;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:54:5: ( 'DIN OT#' '(' INT ')' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:54:7: 'DIN OT#' '(' INT ')'
			{
			DebugLocation(54, 7);
			Match("DIN OT#"); 

			DebugLocation(54, 17);
			Match('('); 
			DebugLocation(54, 21);
			mINT(); 
			DebugLocation(54, 25);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIN", 33);
			LeaveRule("DIN", 33);
			LeaveRule_DIN();
		}
	}
	// $ANTLR end "DIN"

	partial void EnterRule_TIMER();
	partial void LeaveRule_TIMER();

	// $ANTLR start "TIMER"
	[GrammarRule("TIMER")]
	private void mTIMER()
	{
		EnterRule_TIMER();
		EnterRule("TIMER", 34);
		TraceIn("TIMER", 34);
		try
		{
			int _type = TIMER;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:55:7: ( 'TIMER T' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:55:9: 'TIMER T'
			{
			DebugLocation(55, 9);
			Match("TIMER T"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TIMER", 34);
			LeaveRule("TIMER", 34);
			LeaveRule_TIMER();
		}
	}
	// $ANTLR end "TIMER"

	partial void EnterRule_MOVJ();
	partial void LeaveRule_MOVJ();

	// $ANTLR start "MOVJ"
	[GrammarRule("MOVJ")]
	private void mMOVJ()
	{
		EnterRule_MOVJ();
		EnterRule("MOVJ", 35);
		TraceIn("MOVJ", 35);
		try
		{
			int _type = MOVJ;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:56:6: ( 'MOVJ' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:56:8: 'MOVJ'
			{
			DebugLocation(56, 8);
			Match("MOVJ"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOVJ", 35);
			LeaveRule("MOVJ", 35);
			LeaveRule_MOVJ();
		}
	}
	// $ANTLR end "MOVJ"

	partial void EnterRule_MOVL();
	partial void LeaveRule_MOVL();

	// $ANTLR start "MOVL"
	[GrammarRule("MOVL")]
	private void mMOVL()
	{
		EnterRule_MOVL();
		EnterRule("MOVL", 36);
		TraceIn("MOVL", 36);
		try
		{
			int _type = MOVL;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:57:6: ( 'MOVL' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:57:8: 'MOVL'
			{
			DebugLocation(57, 8);
			Match("MOVL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOVL", 36);
			LeaveRule("MOVL", 36);
			LeaveRule_MOVL();
		}
	}
	// $ANTLR end "MOVL"

	partial void EnterRule_MOVC();
	partial void LeaveRule_MOVC();

	// $ANTLR start "MOVC"
	[GrammarRule("MOVC")]
	private void mMOVC()
	{
		EnterRule_MOVC();
		EnterRule("MOVC", 37);
		TraceIn("MOVC", 37);
		try
		{
			int _type = MOVC;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:58:6: ( 'MOVC' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:58:8: 'MOVC'
			{
			DebugLocation(58, 8);
			Match("MOVC"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOVC", 37);
			LeaveRule("MOVC", 37);
			LeaveRule_MOVC();
		}
	}
	// $ANTLR end "MOVC"

	partial void EnterRule_MOVS();
	partial void LeaveRule_MOVS();

	// $ANTLR start "MOVS"
	[GrammarRule("MOVS")]
	private void mMOVS()
	{
		EnterRule_MOVS();
		EnterRule("MOVS", 38);
		TraceIn("MOVS", 38);
		try
		{
			int _type = MOVS;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:59:6: ( 'MOVS' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:59:8: 'MOVS'
			{
			DebugLocation(59, 8);
			Match("MOVS"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOVS", 38);
			LeaveRule("MOVS", 38);
			LeaveRule_MOVS();
		}
	}
	// $ANTLR end "MOVS"

	partial void EnterRule_NIZ();
	partial void LeaveRule_NIZ();

	// $ANTLR start "NIZ"
	[GrammarRule("NIZ")]
	private void mNIZ()
	{
		EnterRule_NIZ();
		EnterRule("NIZ", 39);
		TraceIn("NIZ", 39);
		try
		{
			int _type = NIZ;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:61:5: ( ( 'A' .. 'Z' )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:61:7: ( 'A' .. 'Z' )+
			{
			DebugLocation(61, 7);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:61:7: ( 'A' .. 'Z' )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='A' && LA5_0<='Z')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:
					{
					DebugLocation(61, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIZ", 39);
			LeaveRule("NIZ", 39);
			LeaveRule_NIZ();
		}
	}
	// $ANTLR end "NIZ"

	partial void EnterRule_REAL();
	partial void LeaveRule_REAL();

	// $ANTLR start "REAL"
	[GrammarRule("REAL")]
	private void mREAL()
	{
		EnterRule_REAL();
		EnterRule("REAL", 40);
		TraceIn("REAL", 40);
		try
		{
			int _type = REAL;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:62:6: ( ( INT )+ '.' ( INT )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:62:8: ( INT )+ '.' ( INT )+
			{
			DebugLocation(62, 8);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:62:8: ( INT )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='0' && LA6_0<='9')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:62:8: INT
					{
					DebugLocation(62, 8);
					mINT(); 

					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(62, 13);
			Match('.'); 
			DebugLocation(62, 17);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:62:17: ( INT )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>='0' && LA7_0<='9')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:62:17: INT
					{
					DebugLocation(62, 17);
					mINT(); 

					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REAL", 40);
			LeaveRule("REAL", 40);
			LeaveRule_REAL();
		}
	}
	// $ANTLR end "REAL"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 41);
		TraceIn("INT", 41);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:63:6: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:63:8: ( '0' .. '9' )+
			{
			DebugLocation(63, 8);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:63:8: ( '0' .. '9' )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>='0' && LA8_0<='9')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:
					{
					DebugLocation(63, 8);
					input.Consume();


					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 41);
			LeaveRule("INT", 41);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 42);
		TraceIn("NEWLINE", 42);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:64:9: ( ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:64:11: ( '\\r' )? '\\n'
			{
			DebugLocation(64, 11);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:64:11: ( '\\r' )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0=='\r'))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:64:11: '\\r'
				{
				DebugLocation(64, 11);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(64, 17);
			Match('\n'); 
			DebugLocation(64, 22);
			Skip();

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 42);
			LeaveRule("NEWLINE", 42);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 43);
		TraceIn("WS", 43);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:65:5: ( ( ' ' | '\\t' )+ )
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:65:7: ( ' ' | '\\t' )+
			{
			DebugLocation(65, 7);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:65:7: ( ' ' | '\\t' )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0=='\t'||LA10_0==' '))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:
					{
					DebugLocation(65, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(65, 19);
			Skip();

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 43);
			LeaveRule("WS", 43);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:8: ( T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | JOB | NAME | POS | NPOS | USER | TOOL | POSTYPE | RECTAN | RCONF | INDEKS | INST | DATE | TIME | COMM | ATTR | FRAME | GROUP | DOUT | DIN | TIMER | MOVJ | MOVL | MOVC | MOVS | NIZ | REAL | INT | NEWLINE | WS )
		int alt11=43;
		try { DebugEnterDecision(11, false);
		try
		{
			alt11 = dfa11.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(11); }
		switch (alt11)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:10: T__33
			{
			DebugLocation(1, 10);
			mT__33(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:16: T__34
			{
			DebugLocation(1, 16);
			mT__34(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:22: T__35
			{
			DebugLocation(1, 22);
			mT__35(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:28: T__36
			{
			DebugLocation(1, 28);
			mT__36(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:34: T__37
			{
			DebugLocation(1, 34);
			mT__37(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:40: T__38
			{
			DebugLocation(1, 40);
			mT__38(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:46: T__39
			{
			DebugLocation(1, 46);
			mT__39(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:52: T__40
			{
			DebugLocation(1, 52);
			mT__40(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:58: T__41
			{
			DebugLocation(1, 58);
			mT__41(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:64: T__42
			{
			DebugLocation(1, 64);
			mT__42(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:70: T__43
			{
			DebugLocation(1, 70);
			mT__43(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:76: T__44
			{
			DebugLocation(1, 76);
			mT__44(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:82: T__45
			{
			DebugLocation(1, 82);
			mT__45(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:88: T__46
			{
			DebugLocation(1, 88);
			mT__46(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:94: JOB
			{
			DebugLocation(1, 94);
			mJOB(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:98: NAME
			{
			DebugLocation(1, 98);
			mNAME(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:103: POS
			{
			DebugLocation(1, 103);
			mPOS(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:107: NPOS
			{
			DebugLocation(1, 107);
			mNPOS(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:112: USER
			{
			DebugLocation(1, 112);
			mUSER(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:117: TOOL
			{
			DebugLocation(1, 117);
			mTOOL(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:122: POSTYPE
			{
			DebugLocation(1, 122);
			mPOSTYPE(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:130: RECTAN
			{
			DebugLocation(1, 130);
			mRECTAN(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:137: RCONF
			{
			DebugLocation(1, 137);
			mRCONF(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:143: INDEKS
			{
			DebugLocation(1, 143);
			mINDEKS(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:150: INST
			{
			DebugLocation(1, 150);
			mINST(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:155: DATE
			{
			DebugLocation(1, 155);
			mDATE(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:160: TIME
			{
			DebugLocation(1, 160);
			mTIME(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:165: COMM
			{
			DebugLocation(1, 165);
			mCOMM(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:170: ATTR
			{
			DebugLocation(1, 170);
			mATTR(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:175: FRAME
			{
			DebugLocation(1, 175);
			mFRAME(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:181: GROUP
			{
			DebugLocation(1, 181);
			mGROUP(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:187: DOUT
			{
			DebugLocation(1, 187);
			mDOUT(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:192: DIN
			{
			DebugLocation(1, 192);
			mDIN(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:196: TIMER
			{
			DebugLocation(1, 196);
			mTIMER(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:202: MOVJ
			{
			DebugLocation(1, 202);
			mMOVJ(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:207: MOVL
			{
			DebugLocation(1, 207);
			mMOVL(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:212: MOVC
			{
			DebugLocation(1, 212);
			mMOVC(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:217: MOVS
			{
			DebugLocation(1, 217);
			mMOVS(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:222: NIZ
			{
			DebugLocation(1, 222);
			mNIZ(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:226: REAL
			{
			DebugLocation(1, 226);
			mREAL(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:231: INT
			{
			DebugLocation(1, 231);
			mINT(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:235: NEWLINE
			{
			DebugLocation(1, 235);
			mNEWLINE(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// D:\\Faks\\2. letnik\\Robotizacija\\RobotLanguage.g:1:243: WS
			{
			DebugLocation(1, 243);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA11 dfa11;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa11 = new DFA11(this);
	}

	private class DFA11 : DFA
	{
		private const string DFA11_eotS =
			"\x3\xFFFF\x1\x18\x1\x19\x1\x1C\x1\xFFFF\x1\x1D\x4\x13\x1\x23\x1\x24\x1"+
			"\x13\x1\x26\x3\x13\xB\xFFFF\x4\x13\x1\x33\x4\xFFFF\x4\x13\x4\xFFFF\x1"+
			"\x42\x1\x43\x2\x13\x1\xFFFF\x4\x13\xC\xFFFF\x1\x13\x1\x50\x1\x13\x1\xFFFF"+
			"\x1\x13\x1\x53\x1\x54\x1\x55\x1\x56\x2\xFFFF\x1\x57\x2\xFFFF\x1\x13\x6"+
			"\xFFFF";
		private const string DFA11_eofS =
			"\x59\xFFFF";
		private const string DFA11_minS =
			"\x1\x9\x2\xFFFF\x1\x2F\x2\x2E\x1\xFFFF\x1\x41\x1\x4E\x1\x4F\x1\x55\x1"+
			"\x53\x2\x41\x1\x30\x1\x2E\x2\x49\x1\x4F\x4\xFFFF\x1\x2F\x6\xFFFF\x1\x44"+
			"\x1\x50\x1\x4C\x1\x45\x1\x41\x4\xFFFF\x1\x55\x1\x4E\x1\x4D\x1\x56\x2"+
			"\xFFFF\x1\x2F\x1\xFFFF\x2\x41\x1\x53\x1\x52\x1\xFFFF\x1\x54\x1\x20\x1"+
			"\x45\x1\x43\x4\xFFFF\x1\x43\x7\xFFFF\x1\x45\x1\x41\x1\x20\x1\xFFFF\x1"+
			"\x52\x4\x41\x2\xFFFF\x1\x41\x2\xFFFF\x1\x20\x6\xFFFF";
		private const string DFA11_maxS =
			"\x1\x5A\x2\xFFFF\x1\x4A\x2\x3A\x1\xFFFF\x1\x5A\x1\x4E\x1\x4F\x1\x55\x1"+
			"\x53\x2\x5A\x1\x39\x1\x3A\x1\x4F\x1\x49\x1\x4F\x4\xFFFF\x1\x50\x6\xFFFF"+
			"\x1\x44\x1\x50\x1\x4C\x1\x45\x1\x5A\x4\xFFFF\x1\x55\x1\x4E\x1\x4D\x1"+
			"\x56\x2\xFFFF\x1\x55\x1\xFFFF\x2\x5A\x1\x53\x1\x52\x1\xFFFF\x1\x54\x1"+
			"\x20\x1\x45\x1\x53\x4\xFFFF\x1\x45\x7\xFFFF\x1\x45\x1\x5A\x1\x20\x1\xFFFF"+
			"\x1\x52\x4\x5A\x2\xFFFF\x1\x5A\x2\xFFFF\x1\x20\x6\xFFFF";
		private const string DFA11_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x3\xFFFF\x1\x6\xC\xFFFF\x1\x27\x1\x2A\x1\x2B\x1"+
			"\xF\x1\xFFFF\x1\x3\x1\x4\x1\x1B\x1\x28\x1\x5\x1\x7\x5\xFFFF\x1\xC\x1"+
			"\xE\x1\x18\x1\x29\x4\xFFFF\x1\x10\x1\x11\x1\xFFFF\x1\x19\x4\xFFFF\x1"+
			"\xD\x4\xFFFF\x1\x12\x1\x13\x1\x14\x1\x15\x1\xFFFF\x1\x1A\x1\x1C\x1\x1D"+
			"\x1\x1E\x1\x1F\x1\x8\x1\x9\x3\xFFFF\x1\x21\x5\xFFFF\x1\x16\x1\x17\x1"+
			"\xFFFF\x1\xB\x1\x20\x1\xFFFF\x1\x23\x1\x24\x1\x25\x1\x26\x1\xA\x1\x22";
		private const string DFA11_specialS =
			"\x59\xFFFF}>";
		private static readonly string[] DFA11_transitionS =
			{
				"\x1\x15\x1\x14\x2\xFFFF\x1\x14\x12\xFFFF\x1\x15\xB\xFFFF\x1\x1\x1\x2"+
				"\x1\xFFFF\x1\x3\x1\x4\x1\x5\x8\xF\x3\xFFFF\x1\x6\x3\xFFFF\x1\x7\x1\x13"+
				"\x1\xE\x1\x10\x1\x8\x7\x13\x1\x12\x1\x9\x1\x13\x1\xA\x3\x13\x1\x11\x1"+
				"\xB\x1\xC\x3\x13\x1\xD",
				"",
				"",
				"\x1\x17\x1A\xFFFF\x1\x16",
				"\x1\x1B\x1\xFFFF\xA\xF\x1\x1A",
				"\x1\x1B\x1\xFFFF\xA\xF\x1\x1A",
				"",
				"\x1A\x13",
				"\x1\x1E",
				"\x1\x1F",
				"\x1\x20",
				"\x1\x21",
				"\x9\x13\x1\x22\x10\x13",
				"\x1A\x13",
				"\xA\x25",
				"\x1\x1B\x1\xFFFF\xA\xF\x1\x1A",
				"\x1\x28\x5\xFFFF\x1\x27",
				"\x1\x29",
				"\x1\x2A",
				"",
				"",
				"",
				"",
				"\x1\x2D\x19\xFFFF\x1\x2E\x4\xFFFF\x1\x2B\x1\xFFFF\x1\x2C",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2F",
				"\x1\x30",
				"\x1\x31",
				"\x1\x32",
				"\x1A\x13",
				"",
				"",
				"",
				"",
				"\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"\x1\x37",
				"",
				"",
				"\x1\x40\x11\xFFFF\x1\x3F\x1\xFFFF\x1\x3E\x1\x3D\x2\xFFFF\x1\x41\x6"+
				"\xFFFF\x1\x38\x1\xFFFF\x1\x3B\x1\xFFFF\x1\x3C\x1\xFFFF\x1\x3A\x1\x39",
				"",
				"\x1A\x13",
				"\x1A\x13",
				"\x1\x44",
				"\x1\x45",
				"",
				"\x1\x46",
				"\x1\x47",
				"\x1\x48",
				"\x1\x4B\x6\xFFFF\x1\x49\x1\xFFFF\x1\x4A\x6\xFFFF\x1\x4C",
				"",
				"",
				"",
				"",
				"\x1\x4E\x1\xFFFF\x1\x4D",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x4F",
				"\x1A\x13",
				"\x1\x51",
				"",
				"\x1\x52",
				"\x1A\x13",
				"\x1A\x13",
				"\x1A\x13",
				"\x1A\x13",
				"",
				"",
				"\x1A\x13",
				"",
				"",
				"\x1\x58",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA11_eot = DFA.UnpackEncodedString(DFA11_eotS);
		private static readonly short[] DFA11_eof = DFA.UnpackEncodedString(DFA11_eofS);
		private static readonly char[] DFA11_min = DFA.UnpackEncodedStringToUnsignedChars(DFA11_minS);
		private static readonly char[] DFA11_max = DFA.UnpackEncodedStringToUnsignedChars(DFA11_maxS);
		private static readonly short[] DFA11_accept = DFA.UnpackEncodedString(DFA11_acceptS);
		private static readonly short[] DFA11_special = DFA.UnpackEncodedString(DFA11_specialS);
		private static readonly short[][] DFA11_transition;

		static DFA11()
		{
			int numStates = DFA11_transitionS.Length;
			DFA11_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA11_transition[i] = DFA.UnpackEncodedString(DFA11_transitionS[i]);
			}
		}

		public DFA11( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 11;
			this.eot = DFA11_eot;
			this.eof = DFA11_eof;
			this.min = DFA11_min;
			this.max = DFA11_max;
			this.accept = DFA11_accept;
			this.special = DFA11_special;
			this.transition = DFA11_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | JOB | NAME | POS | NPOS | USER | TOOL | POSTYPE | RECTAN | RCONF | INDEKS | INST | DATE | TIME | COMM | ATTR | FRAME | GROUP | DOUT | DIN | TIMER | MOVJ | MOVL | MOVC | MOVS | NIZ | REAL | INT | NEWLINE | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
